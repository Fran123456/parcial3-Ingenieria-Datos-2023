// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package parcial.convert_s3_file_dim_fecha_to_redshift_copy_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: convert_s3_file_dim_fecha_to_redshift_Copy Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class convert_s3_file_dim_fecha_to_redshift_Copy implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "convert_s3_file_dim_fecha_to_redshift_Copy";
	private final String projectName = "PARCIAL";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					convert_s3_file_dim_fecha_to_redshift_Copy.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(convert_s3_file_dim_fecha_to_redshift_Copy.this,
									new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tS3Connection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3Connection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tS3Get_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tS3Get_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tS3Connection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tS3Get_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String properties_tDBConnection_1 = "noDatetimeStringSync=true";
				if (properties_tDBConnection_1 == null || properties_tDBConnection_1.trim().length() == 0) {
					properties_tDBConnection_1 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
				} else {
					if (!properties_tDBConnection_1.contains("rewriteBatchedStatements=")) {
						properties_tDBConnection_1 += "&rewriteBatchedStatements=true";
					}

					if (!properties_tDBConnection_1.contains("allowLoadLocalInfile=")) {
						properties_tDBConnection_1 += "&allowLoadLocalInfile=true";
					}
				}

				String url_tDBConnection_1 = "jdbc:mariadb://" + "localhost" + ":" + "3306" + "/" + "parcial" + "?"
						+ properties_tDBConnection_1;
				String dbUser_tDBConnection_1 = "dev";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:uaJ4sN2Kf/rHcsQXT57VvIutLOlaRgLXXFzdNHQIVw==");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "org.mariadb.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(true);
				}

				globalMap.put("db_tDBConnection_1", "parcial");

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_2 begin ] start
				 */

				ok_Hash.put("tDBConnection_2", false);
				start_Hash.put("tDBConnection_2", System.currentTimeMillis());

				currentComponent = "tDBConnection_2";

				int tos_count_tDBConnection_2 = 0;

				java.io.Writer output_tDBConnection_2 = new java.io.FileWriter(
						"D:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/redshift-jdbc.log", true);
				java.io.PrintWriter logWriter_tDBConnection_2 = new java.io.PrintWriter(output_tDBConnection_2, true);
				globalMap.put("fileLogWriter_tDBConnection_2", logWriter_tDBConnection_2);
				java.sql.DriverManager.setLogWriter(logWriter_tDBConnection_2);

				StringBuilder sbuilder_tDBConnection_2 = new StringBuilder();
				sbuilder_tDBConnection_2.append("jdbc:redshift:");
				sbuilder_tDBConnection_2.append("//")
						.append("parcialues.880152552716.us-east-1.redshift-serverless.amazonaws.com").append(":")
						.append("5439").append("/").append("dev").append("?loglevel=").append(2);
				String url_tDBConnection_2 = sbuilder_tDBConnection_2.toString();
				String dbUser_tDBConnection_2 = "admin";

				final String decryptedPassword_tDBConnection_2 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:Gf6l92ZuTb4KGeqFRnM5yKNtFBmvym6CjURwBgf3Z2vNf7G/r96/");
				String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;

				java.sql.Connection conn_tDBConnection_2 = null;

				String driverClass_tDBConnection_2 = "com.amazon.redshift.jdbc42.Driver";
				java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
				globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);

				conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2, dbUser_tDBConnection_2,
						dbPwd_tDBConnection_2);

				globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
				if (null != conn_tDBConnection_2) {

					conn_tDBConnection_2.setAutoCommit(true);
				}
				globalMap.put("schema_" + "tDBConnection_2", "public");

				/**
				 * [tDBConnection_2 begin ] stop
				 */

				/**
				 * [tDBConnection_2 main ] start
				 */

				currentComponent = "tDBConnection_2";

				tos_count_tDBConnection_2++;

				/**
				 * [tDBConnection_2 main ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_end ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_2 end ] start
				 */

				currentComponent = "tDBConnection_2";

				ok_Hash.put("tDBConnection_2", true);
				end_Hash.put("tDBConnection_2", System.currentTimeMillis());

				/**
				 * [tDBConnection_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_2 finally ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}

	public void tS3Connection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tS3Connection_1 begin ] start
				 */

				ok_Hash.put("tS3Connection_1", false);
				start_Hash.put("tS3Connection_1", System.currentTimeMillis());

				currentComponent = "tS3Connection_1";

				int tos_count_tS3Connection_1 = 0;

				final String decryptedPassword_tS3Connection_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:qDcM2gTnu5S8ilNmXMM9MlqMVV2tPjp74EyXvwXM+8LBMRAl5Jnuz6lYDSz9BiGf9HS5vQShVUPnNC2R3IE9nxyR/UI=");

				com.amazonaws.auth.AWSCredentials credentials_tS3Connection_1 = new com.amazonaws.auth.BasicAWSCredentials(
						"AKIA3Q4BUZ7PNEIW7TGF", decryptedPassword_tS3Connection_1);
				com.amazonaws.auth.AWSCredentialsProvider credentialsProvider_tS3Connection_1 = new com.amazonaws.auth.AWSStaticCredentialsProvider(
						credentials_tS3Connection_1);

				com.amazonaws.ClientConfiguration cc_tS3Connection_1 = new com.amazonaws.ClientConfiguration();
				cc_tS3Connection_1.setUserAgent("APN/1.0 Talend/8.0 Studio/8.0 (Talend Open Studio)");

				com.amazonaws.services.s3.AmazonS3ClientBuilder builder_tS3Connection_1 = com.amazonaws.services.s3.AmazonS3ClientBuilder
						.standard();

				final boolean useRegionEndpoint_tS3Connection_1 = false;
				final String regionEndpoint_tS3Connection_1 = "s3.amazonaws.com";
				final boolean enableAccelerateMode_tS3Connection_1 = false;
				final boolean enablePathStyleAccess_tS3Connection_1 = false;

				if (useRegionEndpoint_tS3Connection_1 && regionEndpoint_tS3Connection_1 != null
						&& !regionEndpoint_tS3Connection_1.isEmpty()) {
					builder_tS3Connection_1
							.withEndpointConfiguration(
									new com.amazonaws.client.builder.AwsClientBuilder.EndpointConfiguration(
											regionEndpoint_tS3Connection_1, null))
							.withForceGlobalBucketAccessEnabled(true);
				} else {
					builder_tS3Connection_1.withRegion("us-east-1") // The first region to try your request against
							.withForceGlobalBucketAccessEnabled(true); // If a bucket is in a different region, try
																		// again in the correct region
				}

				if (enableAccelerateMode_tS3Connection_1) {
					builder_tS3Connection_1.withAccelerateModeEnabled(true);
				}

				builder_tS3Connection_1.withCredentials(credentialsProvider_tS3Connection_1)
						.withClientConfiguration(cc_tS3Connection_1);

				if (useRegionEndpoint_tS3Connection_1 && enablePathStyleAccess_tS3Connection_1) {
					builder_tS3Connection_1.enablePathStyleAccess();
				}

				com.amazonaws.services.s3.AmazonS3 conn_tS3Connection_1 = builder_tS3Connection_1.build();

				// This method is just for test connection.
				conn_tS3Connection_1.getS3AccountOwner();

				globalMap.put("conn_" + "tS3Connection_1", conn_tS3Connection_1);

				/**
				 * [tS3Connection_1 begin ] stop
				 */

				/**
				 * [tS3Connection_1 main ] start
				 */

				currentComponent = "tS3Connection_1";

				tos_count_tS3Connection_1++;

				/**
				 * [tS3Connection_1 main ] stop
				 */

				/**
				 * [tS3Connection_1 process_data_begin ] start
				 */

				currentComponent = "tS3Connection_1";

				/**
				 * [tS3Connection_1 process_data_begin ] stop
				 */

				/**
				 * [tS3Connection_1 process_data_end ] start
				 */

				currentComponent = "tS3Connection_1";

				/**
				 * [tS3Connection_1 process_data_end ] stop
				 */

				/**
				 * [tS3Connection_1 end ] start
				 */

				currentComponent = "tS3Connection_1";

				ok_Hash.put("tS3Connection_1", true);
				end_Hash.put("tS3Connection_1", System.currentTimeMillis());

				/**
				 * [tS3Connection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tS3Connection_1 finally ] start
				 */

				currentComponent = "tS3Connection_1";

				/**
				 * [tS3Connection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 1);
	}

	public void tS3Get_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tS3Get_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tS3Get_1 begin ] start
				 */

				ok_Hash.put("tS3Get_1", false);
				start_Hash.put("tS3Get_1", System.currentTimeMillis());

				currentComponent = "tS3Get_1";

				int tos_count_tS3Get_1 = 0;

				com.amazonaws.services.s3.AmazonS3Client conn_tS3Get_1 = (com.amazonaws.services.s3.AmazonS3Client) globalMap
						.get("conn_tS3Connection_1");

				com.amazonaws.services.s3.transfer.TransferManager tm_tS3Get_1 = null;

				try {

					tm_tS3Get_1 = com.amazonaws.services.s3.transfer.TransferManagerBuilder.standard()
							.withS3Client(conn_tS3Get_1).build();

					com.amazonaws.services.s3.model.GetObjectRequest getObjectRequest_tS3Get_1 = new com.amazonaws.services.s3.model.GetObjectRequest(
							"parcial-especializacion", "dimdates-actual.csv");

					com.amazonaws.services.s3.transfer.Download download_tS3Get_1 = tm_tS3Get_1.download(
							getObjectRequest_tS3Get_1,
							new java.io.File("G:/ues-parcial/archive/raw/out/dimdates-actual-s3.csv"), null, 0l, true);

					download_tS3Get_1.waitForCompletion();

				} catch (java.lang.Exception e_tS3Get_1) {
					globalMap.put("tS3Get_1_ERROR_MESSAGE", e_tS3Get_1.getMessage());

					throw (e_tS3Get_1);

				} finally {

					if (tm_tS3Get_1 != null) {
						tm_tS3Get_1.shutdownNow(false);
					}
				}

				/**
				 * [tS3Get_1 begin ] stop
				 */

				/**
				 * [tS3Get_1 main ] start
				 */

				currentComponent = "tS3Get_1";

				tos_count_tS3Get_1++;

				/**
				 * [tS3Get_1 main ] stop
				 */

				/**
				 * [tS3Get_1 process_data_begin ] start
				 */

				currentComponent = "tS3Get_1";

				/**
				 * [tS3Get_1 process_data_begin ] stop
				 */

				/**
				 * [tS3Get_1 process_data_end ] start
				 */

				currentComponent = "tS3Get_1";

				/**
				 * [tS3Get_1 process_data_end ] stop
				 */

				/**
				 * [tS3Get_1 end ] start
				 */

				currentComponent = "tS3Get_1";

				ok_Hash.put("tS3Get_1", true);
				end_Hash.put("tS3Get_1", System.currentTimeMillis());

				/**
				 * [tS3Get_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tS3Get_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tFileInputDelimited_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tS3Get_1 finally ] start
				 */

				currentComponent = "tS3Get_1";

				/**
				 * [tS3Get_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tS3Get_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy = new byte[0];
		static byte[] commonByteArray_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy = new byte[0];

		public Integer Id;

		public Integer getId() {
			return this.Id;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public Integer YearMonthNum;

		public Integer getYearMonthNum() {
			return this.YearMonthNum;
		}

		public String Month;

		public String getMonth() {
			return this.Month;
		}

		public Integer Year;

		public Integer getYear() {
			return this.Year;
		}

		public Integer MonthNum;

		public Integer getMonthNum() {
			return this.MonthNum;
		}

		public String MonthName;

		public String getMonthName() {
			return this.MonthName;
		}

		public Integer WeekNum;

		public Integer getWeekNum() {
			return this.WeekNum;
		}

		public Integer DayNumOfYear;

		public Integer getDayNumOfYear() {
			return this.DayNumOfYear;
		}

		public Integer DayNumOfMonth;

		public Integer getDayNumOfMonth() {
			return this.DayNumOfMonth;
		}

		public Integer DayNumOfWeek;

		public Integer getDayNumOfWeek() {
			return this.DayNumOfWeek;
		}

		public String DayName;

		public String getDayName() {
			return this.DayName;
		}

		public Integer Quarter;

		public Integer getQuarter() {
			return this.Quarter;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy.length) {
					if (length < 1024
							&& commonByteArray_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy.length == 0) {
						commonByteArray_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy = new byte[1024];
					} else {
						commonByteArray_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy, 0, length);
				strReturn = new String(commonByteArray_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy.length) {
					if (length < 1024
							&& commonByteArray_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy.length == 0) {
						commonByteArray_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy = new byte[1024];
					} else {
						commonByteArray_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy, 0, length);
				strReturn = new String(commonByteArray_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy) {

				try {

					int length = 0;

					this.Id = readInteger(dis);

					this.Date = readDate(dis);

					this.YearMonthNum = readInteger(dis);

					this.Month = readString(dis);

					this.Year = readInteger(dis);

					this.MonthNum = readInteger(dis);

					this.MonthName = readString(dis);

					this.WeekNum = readInteger(dis);

					this.DayNumOfYear = readInteger(dis);

					this.DayNumOfMonth = readInteger(dis);

					this.DayNumOfWeek = readInteger(dis);

					this.DayName = readString(dis);

					this.Quarter = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy) {

				try {

					int length = 0;

					this.Id = readInteger(dis);

					this.Date = readDate(dis);

					this.YearMonthNum = readInteger(dis);

					this.Month = readString(dis);

					this.Year = readInteger(dis);

					this.MonthNum = readInteger(dis);

					this.MonthName = readString(dis);

					this.WeekNum = readInteger(dis);

					this.DayNumOfYear = readInteger(dis);

					this.DayNumOfMonth = readInteger(dis);

					this.DayNumOfWeek = readInteger(dis);

					this.DayName = readString(dis);

					this.Quarter = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Id, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// Integer

				writeInteger(this.YearMonthNum, dos);

				// String

				writeString(this.Month, dos);

				// Integer

				writeInteger(this.Year, dos);

				// Integer

				writeInteger(this.MonthNum, dos);

				// String

				writeString(this.MonthName, dos);

				// Integer

				writeInteger(this.WeekNum, dos);

				// Integer

				writeInteger(this.DayNumOfYear, dos);

				// Integer

				writeInteger(this.DayNumOfMonth, dos);

				// Integer

				writeInteger(this.DayNumOfWeek, dos);

				// String

				writeString(this.DayName, dos);

				// Integer

				writeInteger(this.Quarter, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.Id, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// Integer

				writeInteger(this.YearMonthNum, dos);

				// String

				writeString(this.Month, dos);

				// Integer

				writeInteger(this.Year, dos);

				// Integer

				writeInteger(this.MonthNum, dos);

				// String

				writeString(this.MonthName, dos);

				// Integer

				writeInteger(this.WeekNum, dos);

				// Integer

				writeInteger(this.DayNumOfYear, dos);

				// Integer

				writeInteger(this.DayNumOfMonth, dos);

				// Integer

				writeInteger(this.DayNumOfWeek, dos);

				// String

				writeString(this.DayName, dos);

				// Integer

				writeInteger(this.Quarter, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + String.valueOf(Id));
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",YearMonthNum=" + String.valueOf(YearMonthNum));
			sb.append(",Month=" + Month);
			sb.append(",Year=" + String.valueOf(Year));
			sb.append(",MonthNum=" + String.valueOf(MonthNum));
			sb.append(",MonthName=" + MonthName);
			sb.append(",WeekNum=" + String.valueOf(WeekNum));
			sb.append(",DayNumOfYear=" + String.valueOf(DayNumOfYear));
			sb.append(",DayNumOfMonth=" + String.valueOf(DayNumOfMonth));
			sb.append(",DayNumOfWeek=" + String.valueOf(DayNumOfWeek));
			sb.append(",DayName=" + DayName);
			sb.append(",Quarter=" + String.valueOf(Quarter));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy = new byte[0];
		static byte[] commonByteArray_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy = new byte[0];

		public Integer Id;

		public Integer getId() {
			return this.Id;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public Integer YearMonthNum;

		public Integer getYearMonthNum() {
			return this.YearMonthNum;
		}

		public String Month;

		public String getMonth() {
			return this.Month;
		}

		public Integer Year;

		public Integer getYear() {
			return this.Year;
		}

		public Integer MonthNum;

		public Integer getMonthNum() {
			return this.MonthNum;
		}

		public String MonthName;

		public String getMonthName() {
			return this.MonthName;
		}

		public Integer WeekNum;

		public Integer getWeekNum() {
			return this.WeekNum;
		}

		public Integer DayNumOfYear;

		public Integer getDayNumOfYear() {
			return this.DayNumOfYear;
		}

		public Integer DayNumOfMonth;

		public Integer getDayNumOfMonth() {
			return this.DayNumOfMonth;
		}

		public Integer DayNumOfWeek;

		public Integer getDayNumOfWeek() {
			return this.DayNumOfWeek;
		}

		public String DayName;

		public String getDayName() {
			return this.DayName;
		}

		public Integer Quarter;

		public Integer getQuarter() {
			return this.Quarter;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy.length) {
					if (length < 1024
							&& commonByteArray_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy.length == 0) {
						commonByteArray_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy = new byte[1024];
					} else {
						commonByteArray_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy, 0, length);
				strReturn = new String(commonByteArray_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy.length) {
					if (length < 1024
							&& commonByteArray_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy.length == 0) {
						commonByteArray_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy = new byte[1024];
					} else {
						commonByteArray_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy, 0, length);
				strReturn = new String(commonByteArray_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy) {

				try {

					int length = 0;

					this.Id = readInteger(dis);

					this.Date = readDate(dis);

					this.YearMonthNum = readInteger(dis);

					this.Month = readString(dis);

					this.Year = readInteger(dis);

					this.MonthNum = readInteger(dis);

					this.MonthName = readString(dis);

					this.WeekNum = readInteger(dis);

					this.DayNumOfYear = readInteger(dis);

					this.DayNumOfMonth = readInteger(dis);

					this.DayNumOfWeek = readInteger(dis);

					this.DayName = readString(dis);

					this.Quarter = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PARCIAL_convert_s3_file_dim_fecha_to_redshift_Copy) {

				try {

					int length = 0;

					this.Id = readInteger(dis);

					this.Date = readDate(dis);

					this.YearMonthNum = readInteger(dis);

					this.Month = readString(dis);

					this.Year = readInteger(dis);

					this.MonthNum = readInteger(dis);

					this.MonthName = readString(dis);

					this.WeekNum = readInteger(dis);

					this.DayNumOfYear = readInteger(dis);

					this.DayNumOfMonth = readInteger(dis);

					this.DayNumOfWeek = readInteger(dis);

					this.DayName = readString(dis);

					this.Quarter = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Id, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// Integer

				writeInteger(this.YearMonthNum, dos);

				// String

				writeString(this.Month, dos);

				// Integer

				writeInteger(this.Year, dos);

				// Integer

				writeInteger(this.MonthNum, dos);

				// String

				writeString(this.MonthName, dos);

				// Integer

				writeInteger(this.WeekNum, dos);

				// Integer

				writeInteger(this.DayNumOfYear, dos);

				// Integer

				writeInteger(this.DayNumOfMonth, dos);

				// Integer

				writeInteger(this.DayNumOfWeek, dos);

				// String

				writeString(this.DayName, dos);

				// Integer

				writeInteger(this.Quarter, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.Id, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// Integer

				writeInteger(this.YearMonthNum, dos);

				// String

				writeString(this.Month, dos);

				// Integer

				writeInteger(this.Year, dos);

				// Integer

				writeInteger(this.MonthNum, dos);

				// String

				writeString(this.MonthName, dos);

				// Integer

				writeInteger(this.WeekNum, dos);

				// Integer

				writeInteger(this.DayNumOfYear, dos);

				// Integer

				writeInteger(this.DayNumOfMonth, dos);

				// Integer

				writeInteger(this.DayNumOfWeek, dos);

				// String

				writeString(this.DayName, dos);

				// Integer

				writeInteger(this.Quarter, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + String.valueOf(Id));
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",YearMonthNum=" + String.valueOf(YearMonthNum));
			sb.append(",Month=" + Month);
			sb.append(",Year=" + String.valueOf(Year));
			sb.append(",MonthNum=" + String.valueOf(MonthNum));
			sb.append(",MonthName=" + MonthName);
			sb.append(",WeekNum=" + String.valueOf(WeekNum));
			sb.append(",DayNumOfYear=" + String.valueOf(DayNumOfYear));
			sb.append(",DayNumOfMonth=" + String.valueOf(DayNumOfMonth));
			sb.append(",DayNumOfWeek=" + String.valueOf(DayNumOfWeek));
			sb.append(",DayName=" + DayName);
			sb.append(",Quarter=" + String.valueOf(Quarter));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tDBOutput_2 = 0;

				String dbschema_tDBOutput_2 = null;
				dbschema_tDBOutput_2 = (String) globalMap.get("schema_" + "tDBConnection_2");

				String tableName_tDBOutput_2 = "dimfecha";
				String schemaForSearch_tDBOutput_2 = null;
				String tableForSearch_tDBOutput_2 = tableName_tDBOutput_2;
				if (dbschema_tDBOutput_2 != null && dbschema_tDBOutput_2.trim().length() > 0) {
					tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + tableName_tDBOutput_2;
				}

				schemaForSearch_tDBOutput_2 = dbschema_tDBOutput_2;

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rowsToCommitCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;

				java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
				calendar_tDBOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
				calendar_tDBOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
				long date_tDBOutput_2;

				boolean whetherReject_tDBOutput_2 = false;

				java.sql.Connection conn_tDBOutput_2 = null;
				conn_tDBOutput_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				class Util_tDBOutput_2 {

					int correctNumPerInsert(String source, int numPerInsert) {
						if (source == null) {
							return numPerInsert;
						}

						int columnCountEveryRow = 0;

						for (int i = 0; i < source.length(); i++) {
							if ('?' == source.charAt(i)) {
								columnCountEveryRow++;
							}
						}

						if (columnCountEveryRow == 0) {
							return numPerInsert;
						}

						int maxNumForParameterSize = 32767;
						int maxNumPerInsert = maxNumForParameterSize / columnCountEveryRow;

						if (numPerInsert > maxNumPerInsert) {
							return maxNumPerInsert;
						}

						return numPerInsert;
					}

				}

				final Util_tDBOutput_2 util_tDBOutput_2 = new Util_tDBOutput_2();
				int numPerInsert_tDBOutput_2 = 100;
				int count_tDBOutput_2 = 0;

				int rsTruncCountNumber_tDBOutput_2 = 0;
				try (java.sql.Statement stmtTruncCount_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
					try (java.sql.ResultSet rsTruncCount_tDBOutput_2 = stmtTruncCount_tDBOutput_2.executeQuery(
							"--Talend -v 8.0 \n SELECT COUNT(1) FROM \"" + tableName_tDBOutput_2 + "\"")) {
						if (rsTruncCount_tDBOutput_2.next()) {
							rsTruncCountNumber_tDBOutput_2 = rsTruncCount_tDBOutput_2.getInt(1);
						}
					}
				}
				try (java.sql.Statement stmtTrunc_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
					stmtTrunc_tDBOutput_2
							.executeUpdate("--Talend -v 8.0 \n TRUNCATE TABLE \"" + tableName_tDBOutput_2 + "\"");
					deletedCount_tDBOutput_2 += rsTruncCountNumber_tDBOutput_2;
				}
				int rowCounttDBOutput_2 = 0;
				class BufferLine_tDBOutput_2 {
					Integer Id;

					public BufferLine_tDBOutput_2 c0(Integer Id) {
						this.Id = Id;
						return this;
					}

					java.util.Date Date;

					public BufferLine_tDBOutput_2 c1(java.util.Date Date) {
						this.Date = Date;
						return this;
					}

					Integer YearMonthNum;

					public BufferLine_tDBOutput_2 c2(Integer YearMonthNum) {
						this.YearMonthNum = YearMonthNum;
						return this;
					}

					String Month;

					public BufferLine_tDBOutput_2 c3(String Month) {
						this.Month = Month;
						return this;
					}

					Integer Year;

					public BufferLine_tDBOutput_2 c4(Integer Year) {
						this.Year = Year;
						return this;
					}

					Integer MonthNum;

					public BufferLine_tDBOutput_2 c5(Integer MonthNum) {
						this.MonthNum = MonthNum;
						return this;
					}

					String MonthName;

					public BufferLine_tDBOutput_2 c6(String MonthName) {
						this.MonthName = MonthName;
						return this;
					}

					Integer WeekNum;

					public BufferLine_tDBOutput_2 c7(Integer WeekNum) {
						this.WeekNum = WeekNum;
						return this;
					}

					Integer DayNumOfYear;

					public BufferLine_tDBOutput_2 c8(Integer DayNumOfYear) {
						this.DayNumOfYear = DayNumOfYear;
						return this;
					}

					Integer DayNumOfMonth;

					public BufferLine_tDBOutput_2 c9(Integer DayNumOfMonth) {
						this.DayNumOfMonth = DayNumOfMonth;
						return this;
					}

					Integer DayNumOfWeek;

					public BufferLine_tDBOutput_2 c10(Integer DayNumOfWeek) {
						this.DayNumOfWeek = DayNumOfWeek;
						return this;
					}

					String DayName;

					public BufferLine_tDBOutput_2 c11(String DayName) {
						this.DayName = DayName;
						return this;
					}

					Integer Quarter;

					public BufferLine_tDBOutput_2 c12(Integer Quarter) {
						this.Quarter = Quarter;
						return this;
					}
				}

				java.util.List<BufferLine_tDBOutput_2> exInsertColValueListtDBOutput_2 = new java.util.ArrayList();
				BufferLine_tDBOutput_2 exInsertColValuetDBOutput_2 = null;

				String valueList_tDBOutput_2 = "(?,?,?,?,?,?,?,?,?,?,?,?,?)";
				numPerInsert_tDBOutput_2 = util_tDBOutput_2.correctNumPerInsert(valueList_tDBOutput_2,
						numPerInsert_tDBOutput_2);

				StringBuilder extendInsertValueStmt_tDBOutput_2 = new StringBuilder();
				for (int i_tDBOutput_2 = 0; i_tDBOutput_2 < numPerInsert_tDBOutput_2; i_tDBOutput_2++) {
					extendInsertValueStmt_tDBOutput_2.append(valueList_tDBOutput_2);
					if (i_tDBOutput_2 != numPerInsert_tDBOutput_2 - 1)
						extendInsertValueStmt_tDBOutput_2.append(",");
				}

				String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2
						+ "\" (\"Id\",\"Date\",\"YearMonthNum\",\"Month\",\"Year\",\"MonthNum\",\"MonthName\",\"WeekNum\",\"DayNumOfYear\",\"DayNumOfMonth\",\"DayNumOfWeek\",\"DayName\",\"Quarter\") VALUES "
						+ extendInsertValueStmt_tDBOutput_2.toString();
				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement("--Talend -v 8.0 \n " + insert_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "fecha";
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				long date_tDBOutput_1;

				java.sql.Connection conn_tDBOutput_1 = null;
				conn_tDBOutput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int count_tDBOutput_1 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
				java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables("parcial", null, null,
						new String[] { "TABLE" });
				boolean whetherExist_tDBOutput_1 = false;
				while (rsTable_tDBOutput_1.next()) {
					String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
					if (table_tDBOutput_1.equalsIgnoreCase("fecha")) {
						whetherExist_tDBOutput_1 = true;
						break;
					}
				}
				if (whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						stmtDrop_tDBOutput_1.execute("DROP TABLE `" + tableName_tDBOutput_1 + "`");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtCreate_tDBOutput_1.execute("CREATE TABLE `" + tableName_tDBOutput_1
							+ "`(`Id` INT(2)  ,`Date` DATE ,`YearMonthNum` INT(6)  ,`Month` VARCHAR(2)  ,`Year` INT(4)  ,`MonthNum` INT(1)  ,`MonthName` VARCHAR(20)  ,`WeekNum` INT(1)  ,`DayNumOfYear` INT(2)  ,`DayNumOfMonth` INT(2)  ,`DayNumOfWeek` INT(1)  ,`DayName` VARCHAR(9)  ,`Quarter` INT(1)  )");
				}

				String insert_tDBOutput_1 = "INSERT INTO `" + "fecha"
						+ "` (`Id`,`Date`,`YearMonthNum`,`Month`,`Year`,`MonthNum`,`MonthName`,`WeekNum`,`DayNumOfYear`,`DayNumOfMonth`,`DayNumOfWeek`,`DayName`,`Quarter`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tDBOutput_1 = 100;
				int batchSizeCounter_tDBOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "G:/ues-parcial/archive/raw/out/dimdates-actual-s3.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"G:/ues-parcial/archive/raw/out/dimdates-actual-s3.csv", "UTF-8", ",", "\n", false, 1,
								0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Id = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Id", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								row1.Id = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Date = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Date", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								row1.Date = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 2;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.YearMonthNum = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"YearMonthNum", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.YearMonthNum = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row1.Month = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Year = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Year", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								row1.Year = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 5;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.MonthNum = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"MonthNum", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.MonthNum = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 6;

							row1.MonthName = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 7;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.WeekNum = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"WeekNum", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.WeekNum = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 8;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.DayNumOfYear = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DayNumOfYear", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.DayNumOfYear = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 9;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.DayNumOfMonth = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DayNumOfMonth", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.DayNumOfMonth = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 10;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.DayNumOfWeek = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DayNumOfWeek", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.DayNumOfWeek = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 11;

							row1.DayName = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 12;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Quarter = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Quarter", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.Quarter = null;

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tDBOutput_1 main ] start
							 */

							currentComponent = "tDBOutput_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row1"

								);
							}

							row2 = null;
							whetherReject_tDBOutput_1 = false;
							if (row1.Id == null) {
								pstmt_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(1, row1.Id);
							}

							if (row1.Date != null) {
								date_tDBOutput_1 = row1.Date.getTime();
								if (date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
									pstmt_tDBOutput_1.setString(2, "0000-00-00 00:00:00");
								} else {
									pstmt_tDBOutput_1.setTimestamp(2, new java.sql.Timestamp(date_tDBOutput_1));
								}
							} else {
								pstmt_tDBOutput_1.setNull(2, java.sql.Types.DATE);
							}

							if (row1.YearMonthNum == null) {
								pstmt_tDBOutput_1.setNull(3, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(3, row1.YearMonthNum);
							}

							if (row1.Month == null) {
								pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(4, row1.Month);
							}

							if (row1.Year == null) {
								pstmt_tDBOutput_1.setNull(5, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(5, row1.Year);
							}

							if (row1.MonthNum == null) {
								pstmt_tDBOutput_1.setNull(6, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(6, row1.MonthNum);
							}

							if (row1.MonthName == null) {
								pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(7, row1.MonthName);
							}

							if (row1.WeekNum == null) {
								pstmt_tDBOutput_1.setNull(8, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(8, row1.WeekNum);
							}

							if (row1.DayNumOfYear == null) {
								pstmt_tDBOutput_1.setNull(9, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(9, row1.DayNumOfYear);
							}

							if (row1.DayNumOfMonth == null) {
								pstmt_tDBOutput_1.setNull(10, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(10, row1.DayNumOfMonth);
							}

							if (row1.DayNumOfWeek == null) {
								pstmt_tDBOutput_1.setNull(11, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(11, row1.DayNumOfWeek);
							}

							if (row1.DayName == null) {
								pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(12, row1.DayName);
							}

							if (row1.Quarter == null) {
								pstmt_tDBOutput_1.setNull(13, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(13, row1.Quarter);
							}

							pstmt_tDBOutput_1.addBatch();
							nb_line_tDBOutput_1++;

							batchSizeCounter_tDBOutput_1++;
							if (!whetherReject_tDBOutput_1) {
								row2 = new row2Struct();
								row2.Id = row1.Id;
								row2.Date = row1.Date;
								row2.YearMonthNum = row1.YearMonthNum;
								row2.Month = row1.Month;
								row2.Year = row1.Year;
								row2.MonthNum = row1.MonthNum;
								row2.MonthName = row1.MonthName;
								row2.WeekNum = row1.WeekNum;
								row2.DayNumOfYear = row1.DayNumOfYear;
								row2.DayNumOfMonth = row1.DayNumOfMonth;
								row2.DayNumOfWeek = row1.DayNumOfWeek;
								row2.DayName = row1.DayName;
								row2.Quarter = row1.Quarter;
							}
							if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
								try {
									int countSum_tDBOutput_1 = 0;
									for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
										countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED
												? 0
												: 1);
									}
									rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
									insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
								} catch (java.sql.BatchUpdateException e) {
									globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());
									throw (e);
								}

								batchSizeCounter_tDBOutput_1 = 0;
							}

							tos_count_tDBOutput_1++;

							/**
							 * [tDBOutput_1 main ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_begin ] stop
							 */
// Start of branch "row2"
							if (row2 != null) {

								/**
								 * [tDBOutput_2 main ] start
								 */

								currentComponent = "tDBOutput_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row2"

									);
								}

								whetherReject_tDBOutput_2 = false;
								int countertDBOutput_2 = rowCounttDBOutput_2 * (13) + 1;

								if (row2.Id == null) {
									pstmt_tDBOutput_2.setNull(countertDBOutput_2, java.sql.Types.INTEGER);

								} else {

									pstmt_tDBOutput_2.setInt(countertDBOutput_2, row2.Id);

								}

								countertDBOutput_2++;

								if (row2.Date != null) {
									// timestamp < min java date value (year 1) || timestamp > max mysql value (year
									// 10000) => set 0000-00-00 as date in MySQL
									date_tDBOutput_2 = row2.Date.getTime();
									if (date_tDBOutput_2 < year1_tDBOutput_2
											|| date_tDBOutput_2 >= year10000_tDBOutput_2) {
										pstmt_tDBOutput_2.setString(countertDBOutput_2, "0000-00-00 00:00:00");
									} else {
										pstmt_tDBOutput_2.setTimestamp(countertDBOutput_2,
												new java.sql.Timestamp(date_tDBOutput_2));
									}
								} else {

									pstmt_tDBOutput_2.setNull(countertDBOutput_2, java.sql.Types.DATE);

								}

								countertDBOutput_2++;

								if (row2.YearMonthNum == null) {
									pstmt_tDBOutput_2.setNull(countertDBOutput_2, java.sql.Types.INTEGER);

								} else {

									pstmt_tDBOutput_2.setInt(countertDBOutput_2, row2.YearMonthNum);

								}

								countertDBOutput_2++;

								if (row2.Month == null) {
									pstmt_tDBOutput_2.setNull(countertDBOutput_2, java.sql.Types.VARCHAR);

								} else {

									pstmt_tDBOutput_2.setString(countertDBOutput_2, row2.Month);

								}

								countertDBOutput_2++;

								if (row2.Year == null) {
									pstmt_tDBOutput_2.setNull(countertDBOutput_2, java.sql.Types.INTEGER);

								} else {

									pstmt_tDBOutput_2.setInt(countertDBOutput_2, row2.Year);

								}

								countertDBOutput_2++;

								if (row2.MonthNum == null) {
									pstmt_tDBOutput_2.setNull(countertDBOutput_2, java.sql.Types.INTEGER);

								} else {

									pstmt_tDBOutput_2.setInt(countertDBOutput_2, row2.MonthNum);

								}

								countertDBOutput_2++;

								if (row2.MonthName == null) {
									pstmt_tDBOutput_2.setNull(countertDBOutput_2, java.sql.Types.VARCHAR);

								} else {

									pstmt_tDBOutput_2.setString(countertDBOutput_2, row2.MonthName);

								}

								countertDBOutput_2++;

								if (row2.WeekNum == null) {
									pstmt_tDBOutput_2.setNull(countertDBOutput_2, java.sql.Types.INTEGER);

								} else {

									pstmt_tDBOutput_2.setInt(countertDBOutput_2, row2.WeekNum);

								}

								countertDBOutput_2++;

								if (row2.DayNumOfYear == null) {
									pstmt_tDBOutput_2.setNull(countertDBOutput_2, java.sql.Types.INTEGER);

								} else {

									pstmt_tDBOutput_2.setInt(countertDBOutput_2, row2.DayNumOfYear);

								}

								countertDBOutput_2++;

								if (row2.DayNumOfMonth == null) {
									pstmt_tDBOutput_2.setNull(countertDBOutput_2, java.sql.Types.INTEGER);

								} else {

									pstmt_tDBOutput_2.setInt(countertDBOutput_2, row2.DayNumOfMonth);

								}

								countertDBOutput_2++;

								if (row2.DayNumOfWeek == null) {
									pstmt_tDBOutput_2.setNull(countertDBOutput_2, java.sql.Types.INTEGER);

								} else {

									pstmt_tDBOutput_2.setInt(countertDBOutput_2, row2.DayNumOfWeek);

								}

								countertDBOutput_2++;

								if (row2.DayName == null) {
									pstmt_tDBOutput_2.setNull(countertDBOutput_2, java.sql.Types.VARCHAR);

								} else {

									pstmt_tDBOutput_2.setString(countertDBOutput_2, row2.DayName);

								}

								countertDBOutput_2++;

								if (row2.Quarter == null) {
									pstmt_tDBOutput_2.setNull(countertDBOutput_2, java.sql.Types.INTEGER);

								} else {

									pstmt_tDBOutput_2.setInt(countertDBOutput_2, row2.Quarter);

								}

								countertDBOutput_2++;

								exInsertColValuetDBOutput_2 = new BufferLine_tDBOutput_2();
								exInsertColValuetDBOutput_2

										.c0(row2.Id).c1(row2.Date).c2(row2.YearMonthNum).c3(row2.Month).c4(row2.Year)
										.c5(row2.MonthNum).c6(row2.MonthName).c7(row2.WeekNum).c8(row2.DayNumOfYear)
										.c9(row2.DayNumOfMonth).c10(row2.DayNumOfWeek).c11(row2.DayName)
										.c12(row2.Quarter);

								exInsertColValueListtDBOutput_2.add(exInsertColValuetDBOutput_2);
								rowCounttDBOutput_2++;

								nb_line_tDBOutput_2++;

								if (rowCounttDBOutput_2 == numPerInsert_tDBOutput_2) {
									int processedCount_tDBOutput_2 = pstmt_tDBOutput_2.executeUpdate();
									insertedCount_tDBOutput_2 += processedCount_tDBOutput_2;
									rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
									exInsertColValueListtDBOutput_2.clear();
									rowCounttDBOutput_2 = 0;
									countertDBOutput_2 = 1;
								}
								if (!whetherReject_tDBOutput_2) {
								}

								tos_count_tDBOutput_2++;

								/**
								 * [tDBOutput_2 main ] stop
								 */

								/**
								 * [tDBOutput_2 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_2";

								/**
								 * [tDBOutput_2 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_2 process_data_end ] start
								 */

								currentComponent = "tDBOutput_2";

								/**
								 * [tDBOutput_2 process_data_end ] stop
								 */

							} // End of branch "row2"

							/**
							 * [tDBOutput_1 process_data_end ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("G:/ues-parcial/archive/raw/out/dimdates-actual-s3.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (batchSizeCounter_tDBOutput_1 != 0) {
						int countSum_tDBOutput_1 = 0;

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}
						rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

						insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {
					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());

					throw (e);

				}
				batchSizeCounter_tDBOutput_1 = 0;

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				if (rowCounttDBOutput_2 != 0) {

					StringBuilder extendInsertValue_tDBOutput_2 = new StringBuilder();
					for (int i_tDBOutput_2 = 0; i_tDBOutput_2 < rowCounttDBOutput_2; i_tDBOutput_2++) {
						extendInsertValue_tDBOutput_2.append("(?,?,?,?,?,?,?,?,?,?,?,?,?)");
						if (i_tDBOutput_2 != rowCounttDBOutput_2 - 1)
							extendInsertValue_tDBOutput_2.append(",");
					}

					insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2
							+ "\" (\"Id\",\"Date\",\"YearMonthNum\",\"Month\",\"Year\",\"MonthNum\",\"MonthName\",\"WeekNum\",\"DayNumOfYear\",\"DayNumOfMonth\",\"DayNumOfWeek\",\"DayName\",\"Quarter\") VALUES "
							+ extendInsertValue_tDBOutput_2.toString();
					pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement("--Talend -v 8.0 \n " + insert_tDBOutput_2);
					rowCounttDBOutput_2 = 0;
					for (BufferLine_tDBOutput_2 bufferLtDBOutput_2 : exInsertColValueListtDBOutput_2) {
						int counttDBOutput_2 = rowCounttDBOutput_2 * (13) + 1;
						if (bufferLtDBOutput_2.Id == null) {
							pstmt_tDBOutput_2.setNull(counttDBOutput_2, java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_2.setInt(counttDBOutput_2, bufferLtDBOutput_2.Id);

						}

						counttDBOutput_2++;

						if (bufferLtDBOutput_2.Date != null) {
							// timestamp < min java date value (year 1) || timestamp > max mysql value (year
							// 10000) => set 0000-00-00 as date in MySQL
							date_tDBOutput_2 = bufferLtDBOutput_2.Date.getTime();
							if (date_tDBOutput_2 < year1_tDBOutput_2 || date_tDBOutput_2 >= year10000_tDBOutput_2) {
								pstmt_tDBOutput_2.setString(counttDBOutput_2, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_2.setTimestamp(counttDBOutput_2,
										new java.sql.Timestamp(date_tDBOutput_2));
							}
						} else {

							pstmt_tDBOutput_2.setNull(counttDBOutput_2, java.sql.Types.DATE);

						}

						counttDBOutput_2++;

						if (bufferLtDBOutput_2.YearMonthNum == null) {
							pstmt_tDBOutput_2.setNull(counttDBOutput_2, java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_2.setInt(counttDBOutput_2, bufferLtDBOutput_2.YearMonthNum);

						}

						counttDBOutput_2++;

						if (bufferLtDBOutput_2.Month == null) {
							pstmt_tDBOutput_2.setNull(counttDBOutput_2, java.sql.Types.VARCHAR);

						} else {

							pstmt_tDBOutput_2.setString(counttDBOutput_2, bufferLtDBOutput_2.Month);

						}

						counttDBOutput_2++;

						if (bufferLtDBOutput_2.Year == null) {
							pstmt_tDBOutput_2.setNull(counttDBOutput_2, java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_2.setInt(counttDBOutput_2, bufferLtDBOutput_2.Year);

						}

						counttDBOutput_2++;

						if (bufferLtDBOutput_2.MonthNum == null) {
							pstmt_tDBOutput_2.setNull(counttDBOutput_2, java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_2.setInt(counttDBOutput_2, bufferLtDBOutput_2.MonthNum);

						}

						counttDBOutput_2++;

						if (bufferLtDBOutput_2.MonthName == null) {
							pstmt_tDBOutput_2.setNull(counttDBOutput_2, java.sql.Types.VARCHAR);

						} else {

							pstmt_tDBOutput_2.setString(counttDBOutput_2, bufferLtDBOutput_2.MonthName);

						}

						counttDBOutput_2++;

						if (bufferLtDBOutput_2.WeekNum == null) {
							pstmt_tDBOutput_2.setNull(counttDBOutput_2, java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_2.setInt(counttDBOutput_2, bufferLtDBOutput_2.WeekNum);

						}

						counttDBOutput_2++;

						if (bufferLtDBOutput_2.DayNumOfYear == null) {
							pstmt_tDBOutput_2.setNull(counttDBOutput_2, java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_2.setInt(counttDBOutput_2, bufferLtDBOutput_2.DayNumOfYear);

						}

						counttDBOutput_2++;

						if (bufferLtDBOutput_2.DayNumOfMonth == null) {
							pstmt_tDBOutput_2.setNull(counttDBOutput_2, java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_2.setInt(counttDBOutput_2, bufferLtDBOutput_2.DayNumOfMonth);

						}

						counttDBOutput_2++;

						if (bufferLtDBOutput_2.DayNumOfWeek == null) {
							pstmt_tDBOutput_2.setNull(counttDBOutput_2, java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_2.setInt(counttDBOutput_2, bufferLtDBOutput_2.DayNumOfWeek);

						}

						counttDBOutput_2++;

						if (bufferLtDBOutput_2.DayName == null) {
							pstmt_tDBOutput_2.setNull(counttDBOutput_2, java.sql.Types.VARCHAR);

						} else {

							pstmt_tDBOutput_2.setString(counttDBOutput_2, bufferLtDBOutput_2.DayName);

						}

						counttDBOutput_2++;

						if (bufferLtDBOutput_2.Quarter == null) {
							pstmt_tDBOutput_2.setNull(counttDBOutput_2, java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_2.setInt(counttDBOutput_2, bufferLtDBOutput_2.Quarter);

						}

						counttDBOutput_2++;

						rowCounttDBOutput_2++;
					}
					int processedCount_tDBOutput_2 = pstmt_tDBOutput_2.executeUpdate();
					insertedCount_tDBOutput_2 += processedCount_tDBOutput_2;
					rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
				}

				if (pstmt_tDBOutput_2 != null) {
					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);
				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBClose_1Process(globalMap);

				/**
				 * [tDBOutput_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
					if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_1")) != null) {
						pstmtToClose_tDBOutput_1.close();
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
					if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_2")) != null) {
						pstmtToClose_tDBOutput_2.close();
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_1 begin ] start
				 */

				ok_Hash.put("tDBClose_1", false);
				start_Hash.put("tDBClose_1", System.currentTimeMillis());

				currentComponent = "tDBClose_1";

				int tos_count_tDBClose_1 = 0;

				/**
				 * [tDBClose_1 begin ] stop
				 */

				/**
				 * [tDBClose_1 main ] start
				 */

				currentComponent = "tDBClose_1";

				java.sql.Connection conn_tDBClose_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");
				if (conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed()) {
					conn_tDBClose_1.close();
				}

				java.io.PrintWriter fileLogWriter_tDBClose_1 = (java.io.PrintWriter) globalMap
						.get("fileLogWriter_tDBConnection_2");
				if (fileLogWriter_tDBClose_1 != null) {
					fileLogWriter_tDBClose_1.close();
				}

				tos_count_tDBClose_1++;

				/**
				 * [tDBClose_1 main ] stop
				 */

				/**
				 * [tDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_1 process_data_end ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tDBClose_1 end ] start
				 */

				currentComponent = "tDBClose_1";

				ok_Hash.put("tDBClose_1", true);
				end_Hash.put("tDBClose_1", System.currentTimeMillis());

				/**
				 * [tDBClose_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_1 finally ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final convert_s3_file_dim_fecha_to_redshift_Copy convert_s3_file_dim_fecha_to_redshift_CopyClass = new convert_s3_file_dim_fecha_to_redshift_Copy();

		int exitCode = convert_s3_file_dim_fecha_to_redshift_CopyClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = convert_s3_file_dim_fecha_to_redshift_Copy.class.getClassLoader()
					.getResourceAsStream("parcial/convert_s3_file_dim_fecha_to_redshift_copy_0_1/contexts/" + contextStr
							+ ".properties");
			if (inContext == null) {
				inContext = convert_s3_file_dim_fecha_to_redshift_Copy.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBConnection_1) {
			globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);

			e_tDBConnection_1.printStackTrace();

		}
		try {
			errorCode = null;
			tDBConnection_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBConnection_2) {
			globalMap.put("tDBConnection_2_SUBPROCESS_STATE", -1);

			e_tDBConnection_2.printStackTrace();

		}
		try {
			errorCode = null;
			tS3Connection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tS3Connection_1) {
			globalMap.put("tS3Connection_1_SUBPROCESS_STATE", -1);

			e_tS3Connection_1.printStackTrace();

		}
		try {
			errorCode = null;
			tS3Get_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tS3Get_1) {
			globalMap.put("tS3Get_1_SUBPROCESS_STATE", -1);

			e_tS3Get_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : convert_s3_file_dim_fecha_to_redshift_Copy");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();
		closeS3Connections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tDBConnection_2");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private void closeS3Connections() {
		try {
			com.amazonaws.services.s3.AmazonS3Client conn_tS3Connection_1 = (com.amazonaws.services.s3.AmazonS3Client) globalMap
					.get("conn_tS3Connection_1");
			if (conn_tS3Connection_1 != null) {
				conn_tS3Connection_1.shutdown();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));
		connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));

		connections.put("conn_tS3Connection_1", globalMap.get("conn_tS3Connection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 123315 characters generated by Talend Open Studio for Data Integration on the
 * 29 October 2023 at 12:06:00 GMT-06:00
 ************************************************************************************************/