// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package parcial.vuelos_tabla_to_fact_vuelos_redshift_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: vuelos_tabla_to_fact_vuelos_redshift Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class vuelos_tabla_to_fact_vuelos_redshift implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "vuelos_tabla_to_fact_vuelos_redshift";
	private final String projectName = "PARCIAL";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					vuelos_tabla_to_fact_vuelos_redshift.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(vuelos_tabla_to_fact_vuelos_redshift.this,
									new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				java.io.Writer output_tDBConnection_1 = new java.io.FileWriter(
						"D:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/redshift-jdbc.log", true);
				java.io.PrintWriter logWriter_tDBConnection_1 = new java.io.PrintWriter(output_tDBConnection_1, true);
				globalMap.put("fileLogWriter_tDBConnection_1", logWriter_tDBConnection_1);
				java.sql.DriverManager.setLogWriter(logWriter_tDBConnection_1);

				StringBuilder sbuilder_tDBConnection_1 = new StringBuilder();
				sbuilder_tDBConnection_1.append("jdbc:redshift:");
				sbuilder_tDBConnection_1.append("//")
						.append("parcialues.880152552716.us-east-1.redshift-serverless.amazonaws.com").append(":")
						.append("5439").append("/").append("dev").append("?loglevel=").append(2);
				String url_tDBConnection_1 = sbuilder_tDBConnection_1.toString();
				String dbUser_tDBConnection_1 = "admin";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:FEK6OaZ9U2a6OvOwpWychxvLi6jxJtThuXRrnZk+zunj0o1zUc5R");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "com.amazon.redshift.jdbc42.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(true);
				}
				globalMap.put("schema_" + "tDBConnection_1", "public");

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_2 begin ] start
				 */

				ok_Hash.put("tDBConnection_2", false);
				start_Hash.put("tDBConnection_2", System.currentTimeMillis());

				currentComponent = "tDBConnection_2";

				int tos_count_tDBConnection_2 = 0;

				String properties_tDBConnection_2 = "noDatetimeStringSync=true";
				if (properties_tDBConnection_2 == null || properties_tDBConnection_2.trim().length() == 0) {
					properties_tDBConnection_2 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
				} else {
					if (!properties_tDBConnection_2.contains("rewriteBatchedStatements=")) {
						properties_tDBConnection_2 += "&rewriteBatchedStatements=true";
					}

					if (!properties_tDBConnection_2.contains("allowLoadLocalInfile=")) {
						properties_tDBConnection_2 += "&allowLoadLocalInfile=true";
					}
				}

				String url_tDBConnection_2 = "jdbc:mariadb://" + "localhost" + ":" + "3306" + "/" + "parcial" + "?"
						+ properties_tDBConnection_2;
				String dbUser_tDBConnection_2 = "dev";

				final String decryptedPassword_tDBConnection_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:DQA8DMOTYgHDI4cuqw3398zFqhf5ymnZFgKmxCW7/A==");
				String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;

				java.sql.Connection conn_tDBConnection_2 = null;

				String driverClass_tDBConnection_2 = "org.mariadb.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
				globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);

				conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2, dbUser_tDBConnection_2,
						dbPwd_tDBConnection_2);

				globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
				if (null != conn_tDBConnection_2) {

					conn_tDBConnection_2.setAutoCommit(true);
				}

				globalMap.put("db_tDBConnection_2", "parcial");

				/**
				 * [tDBConnection_2 begin ] stop
				 */

				/**
				 * [tDBConnection_2 main ] start
				 */

				currentComponent = "tDBConnection_2";

				tos_count_tDBConnection_2++;

				/**
				 * [tDBConnection_2 main ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_end ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_2 end ] start
				 */

				currentComponent = "tDBConnection_2";

				ok_Hash.put("tDBConnection_2", true);
				end_Hash.put("tDBConnection_2", System.currentTimeMillis());

				/**
				 * [tDBConnection_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_2 finally ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}

	public static class obtenerJoinsStruct implements routines.system.IPersistableRow<obtenerJoinsStruct> {
		final static byte[] commonByteArrayLock_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift = new byte[0];
		static byte[] commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift = new byte[0];

		public Integer aerolineakey;

		public Integer getAerolineakey() {
			return this.aerolineakey;
		}

		public Integer fechakey;

		public Integer getFechakey() {
			return this.fechakey;
		}

		public Integer flight;

		public Integer getFlight() {
			return this.flight;
		}

		public Integer cancelledflight;

		public Integer getCancelledflight() {
			return this.cancelledflight;
		}

		public String cancellationcode;

		public String getCancellationcode() {
			return this.cancellationcode;
		}

		public Integer divertedflight;

		public Integer getDivertedflight() {
			return this.divertedflight;
		}

		public Integer depdel15;

		public Integer getDepdel15() {
			return this.depdel15;
		}

		public Integer arrdel15;

		public Integer getArrdel15() {
			return this.arrdel15;
		}

		public Integer depdelayminutes;

		public Integer getDepdelayminutes() {
			return this.depdelayminutes;
		}

		public Integer arrdelayminutes;

		public Integer getArrdelayminutes() {
			return this.arrdelayminutes;
		}

		public Integer carrierdelay;

		public Integer getCarrierdelay() {
			return this.carrierdelay;
		}

		public Integer weatherdelay;

		public Integer getWeatherdelay() {
			return this.weatherdelay;
		}

		public Integer nasdelay;

		public Integer getNasdelay() {
			return this.nasdelay;
		}

		public Integer securitydelay;

		public Integer getSecuritydelay() {
			return this.securitydelay;
		}

		public Integer lateaircraftdelay;

		public Integer getLateaircraftdelay() {
			return this.lateaircraftdelay;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift.length) {
					if (length < 1024 && commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift.length == 0) {
						commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift = new byte[1024];
					} else {
						commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift, 0, length);
				strReturn = new String(commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift.length) {
					if (length < 1024 && commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift.length == 0) {
						commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift = new byte[1024];
					} else {
						commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift, 0, length);
				strReturn = new String(commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift) {

				try {

					int length = 0;

					this.aerolineakey = readInteger(dis);

					this.fechakey = readInteger(dis);

					this.flight = readInteger(dis);

					this.cancelledflight = readInteger(dis);

					this.cancellationcode = readString(dis);

					this.divertedflight = readInteger(dis);

					this.depdel15 = readInteger(dis);

					this.arrdel15 = readInteger(dis);

					this.depdelayminutes = readInteger(dis);

					this.arrdelayminutes = readInteger(dis);

					this.carrierdelay = readInteger(dis);

					this.weatherdelay = readInteger(dis);

					this.nasdelay = readInteger(dis);

					this.securitydelay = readInteger(dis);

					this.lateaircraftdelay = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift) {

				try {

					int length = 0;

					this.aerolineakey = readInteger(dis);

					this.fechakey = readInteger(dis);

					this.flight = readInteger(dis);

					this.cancelledflight = readInteger(dis);

					this.cancellationcode = readString(dis);

					this.divertedflight = readInteger(dis);

					this.depdel15 = readInteger(dis);

					this.arrdel15 = readInteger(dis);

					this.depdelayminutes = readInteger(dis);

					this.arrdelayminutes = readInteger(dis);

					this.carrierdelay = readInteger(dis);

					this.weatherdelay = readInteger(dis);

					this.nasdelay = readInteger(dis);

					this.securitydelay = readInteger(dis);

					this.lateaircraftdelay = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.aerolineakey, dos);

				// Integer

				writeInteger(this.fechakey, dos);

				// Integer

				writeInteger(this.flight, dos);

				// Integer

				writeInteger(this.cancelledflight, dos);

				// String

				writeString(this.cancellationcode, dos);

				// Integer

				writeInteger(this.divertedflight, dos);

				// Integer

				writeInteger(this.depdel15, dos);

				// Integer

				writeInteger(this.arrdel15, dos);

				// Integer

				writeInteger(this.depdelayminutes, dos);

				// Integer

				writeInteger(this.arrdelayminutes, dos);

				// Integer

				writeInteger(this.carrierdelay, dos);

				// Integer

				writeInteger(this.weatherdelay, dos);

				// Integer

				writeInteger(this.nasdelay, dos);

				// Integer

				writeInteger(this.securitydelay, dos);

				// Integer

				writeInteger(this.lateaircraftdelay, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.aerolineakey, dos);

				// Integer

				writeInteger(this.fechakey, dos);

				// Integer

				writeInteger(this.flight, dos);

				// Integer

				writeInteger(this.cancelledflight, dos);

				// String

				writeString(this.cancellationcode, dos);

				// Integer

				writeInteger(this.divertedflight, dos);

				// Integer

				writeInteger(this.depdel15, dos);

				// Integer

				writeInteger(this.arrdel15, dos);

				// Integer

				writeInteger(this.depdelayminutes, dos);

				// Integer

				writeInteger(this.arrdelayminutes, dos);

				// Integer

				writeInteger(this.carrierdelay, dos);

				// Integer

				writeInteger(this.weatherdelay, dos);

				// Integer

				writeInteger(this.nasdelay, dos);

				// Integer

				writeInteger(this.securitydelay, dos);

				// Integer

				writeInteger(this.lateaircraftdelay, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("aerolineakey=" + String.valueOf(aerolineakey));
			sb.append(",fechakey=" + String.valueOf(fechakey));
			sb.append(",flight=" + String.valueOf(flight));
			sb.append(",cancelledflight=" + String.valueOf(cancelledflight));
			sb.append(",cancellationcode=" + cancellationcode);
			sb.append(",divertedflight=" + String.valueOf(divertedflight));
			sb.append(",depdel15=" + String.valueOf(depdel15));
			sb.append(",arrdel15=" + String.valueOf(arrdel15));
			sb.append(",depdelayminutes=" + String.valueOf(depdelayminutes));
			sb.append(",arrdelayminutes=" + String.valueOf(arrdelayminutes));
			sb.append(",carrierdelay=" + String.valueOf(carrierdelay));
			sb.append(",weatherdelay=" + String.valueOf(weatherdelay));
			sb.append(",nasdelay=" + String.valueOf(nasdelay));
			sb.append(",securitydelay=" + String.valueOf(securitydelay));
			sb.append(",lateaircraftdelay=" + String.valueOf(lateaircraftdelay));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(obtenerJoinsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift = new byte[0];
		static byte[] commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift = new byte[0];

		public Integer Year;

		public Integer getYear() {
			return this.Year;
		}

		public Integer Quarter;

		public Integer getQuarter() {
			return this.Quarter;
		}

		public Integer Month;

		public Integer getMonth() {
			return this.Month;
		}

		public Integer DayofMonth;

		public Integer getDayofMonth() {
			return this.DayofMonth;
		}

		public Integer DayOfWeek;

		public Integer getDayOfWeek() {
			return this.DayOfWeek;
		}

		public java.util.Date FlightDate;

		public java.util.Date getFlightDate() {
			return this.FlightDate;
		}

		public String Marketing_Airline_Network;

		public String getMarketing_Airline_Network() {
			return this.Marketing_Airline_Network;
		}

		public String Operated_or_Branded_Code_Share_Partners;

		public String getOperated_or_Branded_Code_Share_Partners() {
			return this.Operated_or_Branded_Code_Share_Partners;
		}

		public Integer DOT_ID_Marketing_Airline;

		public Integer getDOT_ID_Marketing_Airline() {
			return this.DOT_ID_Marketing_Airline;
		}

		public String IATA_Code_Marketing_Airline;

		public String getIATA_Code_Marketing_Airline() {
			return this.IATA_Code_Marketing_Airline;
		}

		public Integer Flight_Number_Marketing_Airline;

		public Integer getFlight_Number_Marketing_Airline() {
			return this.Flight_Number_Marketing_Airline;
		}

		public String Originally_Scheduled_Code_Share_Airline;

		public String getOriginally_Scheduled_Code_Share_Airline() {
			return this.Originally_Scheduled_Code_Share_Airline;
		}

		public Integer DOT_ID_Originally_Scheduled_Code_Share_Airline;

		public Integer getDOT_ID_Originally_Scheduled_Code_Share_Airline() {
			return this.DOT_ID_Originally_Scheduled_Code_Share_Airline;
		}

		public String IATA_Code_Originally_Scheduled_Code_Share_Airline;

		public String getIATA_Code_Originally_Scheduled_Code_Share_Airline() {
			return this.IATA_Code_Originally_Scheduled_Code_Share_Airline;
		}

		public String Flight_Num_Originally_Scheduled_Code_Share_Airline;

		public String getFlight_Num_Originally_Scheduled_Code_Share_Airline() {
			return this.Flight_Num_Originally_Scheduled_Code_Share_Airline;
		}

		public String Operating_Airline;

		public String getOperating_Airline() {
			return this.Operating_Airline;
		}

		public Integer DOT_ID_Operating_Airline;

		public Integer getDOT_ID_Operating_Airline() {
			return this.DOT_ID_Operating_Airline;
		}

		public String IATA_Code_Operating_Airline;

		public String getIATA_Code_Operating_Airline() {
			return this.IATA_Code_Operating_Airline;
		}

		public String Tail_Number;

		public String getTail_Number() {
			return this.Tail_Number;
		}

		public Integer Flight_Number_Operating_Airline;

		public Integer getFlight_Number_Operating_Airline() {
			return this.Flight_Number_Operating_Airline;
		}

		public Integer OriginAirportID;

		public Integer getOriginAirportID() {
			return this.OriginAirportID;
		}

		public Integer OriginAirportSeqID;

		public Integer getOriginAirportSeqID() {
			return this.OriginAirportSeqID;
		}

		public Integer OriginCityMarketID;

		public Integer getOriginCityMarketID() {
			return this.OriginCityMarketID;
		}

		public String Origin;

		public String getOrigin() {
			return this.Origin;
		}

		public String OriginCityName;

		public String getOriginCityName() {
			return this.OriginCityName;
		}

		public String OriginState;

		public String getOriginState() {
			return this.OriginState;
		}

		public Integer OriginStateFips;

		public Integer getOriginStateFips() {
			return this.OriginStateFips;
		}

		public String OriginStateName;

		public String getOriginStateName() {
			return this.OriginStateName;
		}

		public Integer OriginWac;

		public Integer getOriginWac() {
			return this.OriginWac;
		}

		public Integer DestAirportID;

		public Integer getDestAirportID() {
			return this.DestAirportID;
		}

		public Integer DestAirportSeqID;

		public Integer getDestAirportSeqID() {
			return this.DestAirportSeqID;
		}

		public Integer DestCityMarketID;

		public Integer getDestCityMarketID() {
			return this.DestCityMarketID;
		}

		public String Dest;

		public String getDest() {
			return this.Dest;
		}

		public String DestCityName;

		public String getDestCityName() {
			return this.DestCityName;
		}

		public String DestState;

		public String getDestState() {
			return this.DestState;
		}

		public Integer DestStateFips;

		public Integer getDestStateFips() {
			return this.DestStateFips;
		}

		public String DestStateName;

		public String getDestStateName() {
			return this.DestStateName;
		}

		public Integer DestWac;

		public Integer getDestWac() {
			return this.DestWac;
		}

		public Integer CRSDepTime;

		public Integer getCRSDepTime() {
			return this.CRSDepTime;
		}

		public Integer DepTime;

		public Integer getDepTime() {
			return this.DepTime;
		}

		public Integer DepDelay;

		public Integer getDepDelay() {
			return this.DepDelay;
		}

		public Integer DepDelayMinutes;

		public Integer getDepDelayMinutes() {
			return this.DepDelayMinutes;
		}

		public Integer DepDel15;

		public Integer getDepDel15() {
			return this.DepDel15;
		}

		public Integer DepartureDelayGroups;

		public Integer getDepartureDelayGroups() {
			return this.DepartureDelayGroups;
		}

		public String DepTimeBlk;

		public String getDepTimeBlk() {
			return this.DepTimeBlk;
		}

		public Integer TaxiOut;

		public Integer getTaxiOut() {
			return this.TaxiOut;
		}

		public Integer WheelsOff;

		public Integer getWheelsOff() {
			return this.WheelsOff;
		}

		public Integer WheelsOn;

		public Integer getWheelsOn() {
			return this.WheelsOn;
		}

		public Integer TaxiIn;

		public Integer getTaxiIn() {
			return this.TaxiIn;
		}

		public Integer CRSArrTime;

		public Integer getCRSArrTime() {
			return this.CRSArrTime;
		}

		public Integer ArrTime;

		public Integer getArrTime() {
			return this.ArrTime;
		}

		public Integer ArrDelay;

		public Integer getArrDelay() {
			return this.ArrDelay;
		}

		public Integer ArrDelayMinutes;

		public Integer getArrDelayMinutes() {
			return this.ArrDelayMinutes;
		}

		public Integer ArrDel15;

		public Integer getArrDel15() {
			return this.ArrDel15;
		}

		public Integer ArrivalDelayGroups;

		public Integer getArrivalDelayGroups() {
			return this.ArrivalDelayGroups;
		}

		public String ArrTimeBlk;

		public String getArrTimeBlk() {
			return this.ArrTimeBlk;
		}

		public Integer Cancelled;

		public Integer getCancelled() {
			return this.Cancelled;
		}

		public String CancellationCode;

		public String getCancellationCode() {
			return this.CancellationCode;
		}

		public Integer Diverted;

		public Integer getDiverted() {
			return this.Diverted;
		}

		public Integer CRSElapsedTime;

		public Integer getCRSElapsedTime() {
			return this.CRSElapsedTime;
		}

		public Integer ActualElapsedTime;

		public Integer getActualElapsedTime() {
			return this.ActualElapsedTime;
		}

		public Integer AirTime;

		public Integer getAirTime() {
			return this.AirTime;
		}

		public Integer Flights;

		public Integer getFlights() {
			return this.Flights;
		}

		public Integer Distance;

		public Integer getDistance() {
			return this.Distance;
		}

		public Integer DistanceGroup;

		public Integer getDistanceGroup() {
			return this.DistanceGroup;
		}

		public Integer CarrierDelay;

		public Integer getCarrierDelay() {
			return this.CarrierDelay;
		}

		public Integer WeatherDelay;

		public Integer getWeatherDelay() {
			return this.WeatherDelay;
		}

		public Integer NASDelay;

		public Integer getNASDelay() {
			return this.NASDelay;
		}

		public Integer SecurityDelay;

		public Integer getSecurityDelay() {
			return this.SecurityDelay;
		}

		public Integer LateAircraftDelay;

		public Integer getLateAircraftDelay() {
			return this.LateAircraftDelay;
		}

		public Integer FirstDepTime;

		public Integer getFirstDepTime() {
			return this.FirstDepTime;
		}

		public Integer TotalAddGTime;

		public Integer getTotalAddGTime() {
			return this.TotalAddGTime;
		}

		public Integer LongestAddGTime;

		public Integer getLongestAddGTime() {
			return this.LongestAddGTime;
		}

		public Integer DivAirportLandings;

		public Integer getDivAirportLandings() {
			return this.DivAirportLandings;
		}

		public String DivReachedDest;

		public String getDivReachedDest() {
			return this.DivReachedDest;
		}

		public String DivActualElapsedTime;

		public String getDivActualElapsedTime() {
			return this.DivActualElapsedTime;
		}

		public String DivArrDelay;

		public String getDivArrDelay() {
			return this.DivArrDelay;
		}

		public String DivDistance;

		public String getDivDistance() {
			return this.DivDistance;
		}

		public String Div1Airport;

		public String getDiv1Airport() {
			return this.Div1Airport;
		}

		public String Div1AirportID;

		public String getDiv1AirportID() {
			return this.Div1AirportID;
		}

		public String Div1AirportSeqID;

		public String getDiv1AirportSeqID() {
			return this.Div1AirportSeqID;
		}

		public String Div1WheelsOn;

		public String getDiv1WheelsOn() {
			return this.Div1WheelsOn;
		}

		public String Div1TotalGTime;

		public String getDiv1TotalGTime() {
			return this.Div1TotalGTime;
		}

		public String Div1LongestGTime;

		public String getDiv1LongestGTime() {
			return this.Div1LongestGTime;
		}

		public String Div1WheelsOff;

		public String getDiv1WheelsOff() {
			return this.Div1WheelsOff;
		}

		public String Div1TailNum;

		public String getDiv1TailNum() {
			return this.Div1TailNum;
		}

		public String Div2Airport;

		public String getDiv2Airport() {
			return this.Div2Airport;
		}

		public String Div2AirportID;

		public String getDiv2AirportID() {
			return this.Div2AirportID;
		}

		public String Div2AirportSeqID;

		public String getDiv2AirportSeqID() {
			return this.Div2AirportSeqID;
		}

		public String Div2WheelsOn;

		public String getDiv2WheelsOn() {
			return this.Div2WheelsOn;
		}

		public String Div2TotalGTime;

		public String getDiv2TotalGTime() {
			return this.Div2TotalGTime;
		}

		public String Div2LongestGTime;

		public String getDiv2LongestGTime() {
			return this.Div2LongestGTime;
		}

		public String Div2WheelsOff;

		public String getDiv2WheelsOff() {
			return this.Div2WheelsOff;
		}

		public String Div2TailNum;

		public String getDiv2TailNum() {
			return this.Div2TailNum;
		}

		public String Div3Airport;

		public String getDiv3Airport() {
			return this.Div3Airport;
		}

		public String Div3AirportID;

		public String getDiv3AirportID() {
			return this.Div3AirportID;
		}

		public String Div3AirportSeqID;

		public String getDiv3AirportSeqID() {
			return this.Div3AirportSeqID;
		}

		public String Div3WheelsOn;

		public String getDiv3WheelsOn() {
			return this.Div3WheelsOn;
		}

		public String Div3TotalGTime;

		public String getDiv3TotalGTime() {
			return this.Div3TotalGTime;
		}

		public String Div3LongestGTime;

		public String getDiv3LongestGTime() {
			return this.Div3LongestGTime;
		}

		public String Div3WheelsOff;

		public String getDiv3WheelsOff() {
			return this.Div3WheelsOff;
		}

		public String Div3TailNum;

		public String getDiv3TailNum() {
			return this.Div3TailNum;
		}

		public String Div4Airport;

		public String getDiv4Airport() {
			return this.Div4Airport;
		}

		public String Div4AirportID;

		public String getDiv4AirportID() {
			return this.Div4AirportID;
		}

		public String Div4AirportSeqID;

		public String getDiv4AirportSeqID() {
			return this.Div4AirportSeqID;
		}

		public String Div4WheelsOn;

		public String getDiv4WheelsOn() {
			return this.Div4WheelsOn;
		}

		public String Div4TotalGTime;

		public String getDiv4TotalGTime() {
			return this.Div4TotalGTime;
		}

		public String Div4LongestGTime;

		public String getDiv4LongestGTime() {
			return this.Div4LongestGTime;
		}

		public String Div4WheelsOff;

		public String getDiv4WheelsOff() {
			return this.Div4WheelsOff;
		}

		public String Div4TailNum;

		public String getDiv4TailNum() {
			return this.Div4TailNum;
		}

		public String Div5Airport;

		public String getDiv5Airport() {
			return this.Div5Airport;
		}

		public String Div5AirportID;

		public String getDiv5AirportID() {
			return this.Div5AirportID;
		}

		public String Div5AirportSeqID;

		public String getDiv5AirportSeqID() {
			return this.Div5AirportSeqID;
		}

		public String Div5WheelsOn;

		public String getDiv5WheelsOn() {
			return this.Div5WheelsOn;
		}

		public String Div5TotalGTime;

		public String getDiv5TotalGTime() {
			return this.Div5TotalGTime;
		}

		public String Div5LongestGTime;

		public String getDiv5LongestGTime() {
			return this.Div5LongestGTime;
		}

		public String Div5WheelsOff;

		public String getDiv5WheelsOff() {
			return this.Div5WheelsOff;
		}

		public String Div5TailNum;

		public String getDiv5TailNum() {
			return this.Div5TailNum;
		}

		public String Duplicate;

		public String getDuplicate() {
			return this.Duplicate;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift.length) {
					if (length < 1024 && commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift.length == 0) {
						commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift = new byte[1024];
					} else {
						commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift, 0, length);
				strReturn = new String(commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift.length) {
					if (length < 1024 && commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift.length == 0) {
						commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift = new byte[1024];
					} else {
						commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift, 0, length);
				strReturn = new String(commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift) {

				try {

					int length = 0;

					this.Year = readInteger(dis);

					this.Quarter = readInteger(dis);

					this.Month = readInteger(dis);

					this.DayofMonth = readInteger(dis);

					this.DayOfWeek = readInteger(dis);

					this.FlightDate = readDate(dis);

					this.Marketing_Airline_Network = readString(dis);

					this.Operated_or_Branded_Code_Share_Partners = readString(dis);

					this.DOT_ID_Marketing_Airline = readInteger(dis);

					this.IATA_Code_Marketing_Airline = readString(dis);

					this.Flight_Number_Marketing_Airline = readInteger(dis);

					this.Originally_Scheduled_Code_Share_Airline = readString(dis);

					this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readInteger(dis);

					this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);

					this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);

					this.Operating_Airline = readString(dis);

					this.DOT_ID_Operating_Airline = readInteger(dis);

					this.IATA_Code_Operating_Airline = readString(dis);

					this.Tail_Number = readString(dis);

					this.Flight_Number_Operating_Airline = readInteger(dis);

					this.OriginAirportID = readInteger(dis);

					this.OriginAirportSeqID = readInteger(dis);

					this.OriginCityMarketID = readInteger(dis);

					this.Origin = readString(dis);

					this.OriginCityName = readString(dis);

					this.OriginState = readString(dis);

					this.OriginStateFips = readInteger(dis);

					this.OriginStateName = readString(dis);

					this.OriginWac = readInteger(dis);

					this.DestAirportID = readInteger(dis);

					this.DestAirportSeqID = readInteger(dis);

					this.DestCityMarketID = readInteger(dis);

					this.Dest = readString(dis);

					this.DestCityName = readString(dis);

					this.DestState = readString(dis);

					this.DestStateFips = readInteger(dis);

					this.DestStateName = readString(dis);

					this.DestWac = readInteger(dis);

					this.CRSDepTime = readInteger(dis);

					this.DepTime = readInteger(dis);

					this.DepDelay = readInteger(dis);

					this.DepDelayMinutes = readInteger(dis);

					this.DepDel15 = readInteger(dis);

					this.DepartureDelayGroups = readInteger(dis);

					this.DepTimeBlk = readString(dis);

					this.TaxiOut = readInteger(dis);

					this.WheelsOff = readInteger(dis);

					this.WheelsOn = readInteger(dis);

					this.TaxiIn = readInteger(dis);

					this.CRSArrTime = readInteger(dis);

					this.ArrTime = readInteger(dis);

					this.ArrDelay = readInteger(dis);

					this.ArrDelayMinutes = readInteger(dis);

					this.ArrDel15 = readInteger(dis);

					this.ArrivalDelayGroups = readInteger(dis);

					this.ArrTimeBlk = readString(dis);

					this.Cancelled = readInteger(dis);

					this.CancellationCode = readString(dis);

					this.Diverted = readInteger(dis);

					this.CRSElapsedTime = readInteger(dis);

					this.ActualElapsedTime = readInteger(dis);

					this.AirTime = readInteger(dis);

					this.Flights = readInteger(dis);

					this.Distance = readInteger(dis);

					this.DistanceGroup = readInteger(dis);

					this.CarrierDelay = readInteger(dis);

					this.WeatherDelay = readInteger(dis);

					this.NASDelay = readInteger(dis);

					this.SecurityDelay = readInteger(dis);

					this.LateAircraftDelay = readInteger(dis);

					this.FirstDepTime = readInteger(dis);

					this.TotalAddGTime = readInteger(dis);

					this.LongestAddGTime = readInteger(dis);

					this.DivAirportLandings = readInteger(dis);

					this.DivReachedDest = readString(dis);

					this.DivActualElapsedTime = readString(dis);

					this.DivArrDelay = readString(dis);

					this.DivDistance = readString(dis);

					this.Div1Airport = readString(dis);

					this.Div1AirportID = readString(dis);

					this.Div1AirportSeqID = readString(dis);

					this.Div1WheelsOn = readString(dis);

					this.Div1TotalGTime = readString(dis);

					this.Div1LongestGTime = readString(dis);

					this.Div1WheelsOff = readString(dis);

					this.Div1TailNum = readString(dis);

					this.Div2Airport = readString(dis);

					this.Div2AirportID = readString(dis);

					this.Div2AirportSeqID = readString(dis);

					this.Div2WheelsOn = readString(dis);

					this.Div2TotalGTime = readString(dis);

					this.Div2LongestGTime = readString(dis);

					this.Div2WheelsOff = readString(dis);

					this.Div2TailNum = readString(dis);

					this.Div3Airport = readString(dis);

					this.Div3AirportID = readString(dis);

					this.Div3AirportSeqID = readString(dis);

					this.Div3WheelsOn = readString(dis);

					this.Div3TotalGTime = readString(dis);

					this.Div3LongestGTime = readString(dis);

					this.Div3WheelsOff = readString(dis);

					this.Div3TailNum = readString(dis);

					this.Div4Airport = readString(dis);

					this.Div4AirportID = readString(dis);

					this.Div4AirportSeqID = readString(dis);

					this.Div4WheelsOn = readString(dis);

					this.Div4TotalGTime = readString(dis);

					this.Div4LongestGTime = readString(dis);

					this.Div4WheelsOff = readString(dis);

					this.Div4TailNum = readString(dis);

					this.Div5Airport = readString(dis);

					this.Div5AirportID = readString(dis);

					this.Div5AirportSeqID = readString(dis);

					this.Div5WheelsOn = readString(dis);

					this.Div5TotalGTime = readString(dis);

					this.Div5LongestGTime = readString(dis);

					this.Div5WheelsOff = readString(dis);

					this.Div5TailNum = readString(dis);

					this.Duplicate = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift) {

				try {

					int length = 0;

					this.Year = readInteger(dis);

					this.Quarter = readInteger(dis);

					this.Month = readInteger(dis);

					this.DayofMonth = readInteger(dis);

					this.DayOfWeek = readInteger(dis);

					this.FlightDate = readDate(dis);

					this.Marketing_Airline_Network = readString(dis);

					this.Operated_or_Branded_Code_Share_Partners = readString(dis);

					this.DOT_ID_Marketing_Airline = readInteger(dis);

					this.IATA_Code_Marketing_Airline = readString(dis);

					this.Flight_Number_Marketing_Airline = readInteger(dis);

					this.Originally_Scheduled_Code_Share_Airline = readString(dis);

					this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readInteger(dis);

					this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);

					this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);

					this.Operating_Airline = readString(dis);

					this.DOT_ID_Operating_Airline = readInteger(dis);

					this.IATA_Code_Operating_Airline = readString(dis);

					this.Tail_Number = readString(dis);

					this.Flight_Number_Operating_Airline = readInteger(dis);

					this.OriginAirportID = readInteger(dis);

					this.OriginAirportSeqID = readInteger(dis);

					this.OriginCityMarketID = readInteger(dis);

					this.Origin = readString(dis);

					this.OriginCityName = readString(dis);

					this.OriginState = readString(dis);

					this.OriginStateFips = readInteger(dis);

					this.OriginStateName = readString(dis);

					this.OriginWac = readInteger(dis);

					this.DestAirportID = readInteger(dis);

					this.DestAirportSeqID = readInteger(dis);

					this.DestCityMarketID = readInteger(dis);

					this.Dest = readString(dis);

					this.DestCityName = readString(dis);

					this.DestState = readString(dis);

					this.DestStateFips = readInteger(dis);

					this.DestStateName = readString(dis);

					this.DestWac = readInteger(dis);

					this.CRSDepTime = readInteger(dis);

					this.DepTime = readInteger(dis);

					this.DepDelay = readInteger(dis);

					this.DepDelayMinutes = readInteger(dis);

					this.DepDel15 = readInteger(dis);

					this.DepartureDelayGroups = readInteger(dis);

					this.DepTimeBlk = readString(dis);

					this.TaxiOut = readInteger(dis);

					this.WheelsOff = readInteger(dis);

					this.WheelsOn = readInteger(dis);

					this.TaxiIn = readInteger(dis);

					this.CRSArrTime = readInteger(dis);

					this.ArrTime = readInteger(dis);

					this.ArrDelay = readInteger(dis);

					this.ArrDelayMinutes = readInteger(dis);

					this.ArrDel15 = readInteger(dis);

					this.ArrivalDelayGroups = readInteger(dis);

					this.ArrTimeBlk = readString(dis);

					this.Cancelled = readInteger(dis);

					this.CancellationCode = readString(dis);

					this.Diverted = readInteger(dis);

					this.CRSElapsedTime = readInteger(dis);

					this.ActualElapsedTime = readInteger(dis);

					this.AirTime = readInteger(dis);

					this.Flights = readInteger(dis);

					this.Distance = readInteger(dis);

					this.DistanceGroup = readInteger(dis);

					this.CarrierDelay = readInteger(dis);

					this.WeatherDelay = readInteger(dis);

					this.NASDelay = readInteger(dis);

					this.SecurityDelay = readInteger(dis);

					this.LateAircraftDelay = readInteger(dis);

					this.FirstDepTime = readInteger(dis);

					this.TotalAddGTime = readInteger(dis);

					this.LongestAddGTime = readInteger(dis);

					this.DivAirportLandings = readInteger(dis);

					this.DivReachedDest = readString(dis);

					this.DivActualElapsedTime = readString(dis);

					this.DivArrDelay = readString(dis);

					this.DivDistance = readString(dis);

					this.Div1Airport = readString(dis);

					this.Div1AirportID = readString(dis);

					this.Div1AirportSeqID = readString(dis);

					this.Div1WheelsOn = readString(dis);

					this.Div1TotalGTime = readString(dis);

					this.Div1LongestGTime = readString(dis);

					this.Div1WheelsOff = readString(dis);

					this.Div1TailNum = readString(dis);

					this.Div2Airport = readString(dis);

					this.Div2AirportID = readString(dis);

					this.Div2AirportSeqID = readString(dis);

					this.Div2WheelsOn = readString(dis);

					this.Div2TotalGTime = readString(dis);

					this.Div2LongestGTime = readString(dis);

					this.Div2WheelsOff = readString(dis);

					this.Div2TailNum = readString(dis);

					this.Div3Airport = readString(dis);

					this.Div3AirportID = readString(dis);

					this.Div3AirportSeqID = readString(dis);

					this.Div3WheelsOn = readString(dis);

					this.Div3TotalGTime = readString(dis);

					this.Div3LongestGTime = readString(dis);

					this.Div3WheelsOff = readString(dis);

					this.Div3TailNum = readString(dis);

					this.Div4Airport = readString(dis);

					this.Div4AirportID = readString(dis);

					this.Div4AirportSeqID = readString(dis);

					this.Div4WheelsOn = readString(dis);

					this.Div4TotalGTime = readString(dis);

					this.Div4LongestGTime = readString(dis);

					this.Div4WheelsOff = readString(dis);

					this.Div4TailNum = readString(dis);

					this.Div5Airport = readString(dis);

					this.Div5AirportID = readString(dis);

					this.Div5AirportSeqID = readString(dis);

					this.Div5WheelsOn = readString(dis);

					this.Div5TotalGTime = readString(dis);

					this.Div5LongestGTime = readString(dis);

					this.Div5WheelsOff = readString(dis);

					this.Div5TailNum = readString(dis);

					this.Duplicate = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Year, dos);

				// Integer

				writeInteger(this.Quarter, dos);

				// Integer

				writeInteger(this.Month, dos);

				// Integer

				writeInteger(this.DayofMonth, dos);

				// Integer

				writeInteger(this.DayOfWeek, dos);

				// java.util.Date

				writeDate(this.FlightDate, dos);

				// String

				writeString(this.Marketing_Airline_Network, dos);

				// String

				writeString(this.Operated_or_Branded_Code_Share_Partners, dos);

				// Integer

				writeInteger(this.DOT_ID_Marketing_Airline, dos);

				// String

				writeString(this.IATA_Code_Marketing_Airline, dos);

				// Integer

				writeInteger(this.Flight_Number_Marketing_Airline, dos);

				// String

				writeString(this.Originally_Scheduled_Code_Share_Airline, dos);

				// Integer

				writeInteger(this.DOT_ID_Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this.Operating_Airline, dos);

				// Integer

				writeInteger(this.DOT_ID_Operating_Airline, dos);

				// String

				writeString(this.IATA_Code_Operating_Airline, dos);

				// String

				writeString(this.Tail_Number, dos);

				// Integer

				writeInteger(this.Flight_Number_Operating_Airline, dos);

				// Integer

				writeInteger(this.OriginAirportID, dos);

				// Integer

				writeInteger(this.OriginAirportSeqID, dos);

				// Integer

				writeInteger(this.OriginCityMarketID, dos);

				// String

				writeString(this.Origin, dos);

				// String

				writeString(this.OriginCityName, dos);

				// String

				writeString(this.OriginState, dos);

				// Integer

				writeInteger(this.OriginStateFips, dos);

				// String

				writeString(this.OriginStateName, dos);

				// Integer

				writeInteger(this.OriginWac, dos);

				// Integer

				writeInteger(this.DestAirportID, dos);

				// Integer

				writeInteger(this.DestAirportSeqID, dos);

				// Integer

				writeInteger(this.DestCityMarketID, dos);

				// String

				writeString(this.Dest, dos);

				// String

				writeString(this.DestCityName, dos);

				// String

				writeString(this.DestState, dos);

				// Integer

				writeInteger(this.DestStateFips, dos);

				// String

				writeString(this.DestStateName, dos);

				// Integer

				writeInteger(this.DestWac, dos);

				// Integer

				writeInteger(this.CRSDepTime, dos);

				// Integer

				writeInteger(this.DepTime, dos);

				// Integer

				writeInteger(this.DepDelay, dos);

				// Integer

				writeInteger(this.DepDelayMinutes, dos);

				// Integer

				writeInteger(this.DepDel15, dos);

				// Integer

				writeInteger(this.DepartureDelayGroups, dos);

				// String

				writeString(this.DepTimeBlk, dos);

				// Integer

				writeInteger(this.TaxiOut, dos);

				// Integer

				writeInteger(this.WheelsOff, dos);

				// Integer

				writeInteger(this.WheelsOn, dos);

				// Integer

				writeInteger(this.TaxiIn, dos);

				// Integer

				writeInteger(this.CRSArrTime, dos);

				// Integer

				writeInteger(this.ArrTime, dos);

				// Integer

				writeInteger(this.ArrDelay, dos);

				// Integer

				writeInteger(this.ArrDelayMinutes, dos);

				// Integer

				writeInteger(this.ArrDel15, dos);

				// Integer

				writeInteger(this.ArrivalDelayGroups, dos);

				// String

				writeString(this.ArrTimeBlk, dos);

				// Integer

				writeInteger(this.Cancelled, dos);

				// String

				writeString(this.CancellationCode, dos);

				// Integer

				writeInteger(this.Diverted, dos);

				// Integer

				writeInteger(this.CRSElapsedTime, dos);

				// Integer

				writeInteger(this.ActualElapsedTime, dos);

				// Integer

				writeInteger(this.AirTime, dos);

				// Integer

				writeInteger(this.Flights, dos);

				// Integer

				writeInteger(this.Distance, dos);

				// Integer

				writeInteger(this.DistanceGroup, dos);

				// Integer

				writeInteger(this.CarrierDelay, dos);

				// Integer

				writeInteger(this.WeatherDelay, dos);

				// Integer

				writeInteger(this.NASDelay, dos);

				// Integer

				writeInteger(this.SecurityDelay, dos);

				// Integer

				writeInteger(this.LateAircraftDelay, dos);

				// Integer

				writeInteger(this.FirstDepTime, dos);

				// Integer

				writeInteger(this.TotalAddGTime, dos);

				// Integer

				writeInteger(this.LongestAddGTime, dos);

				// Integer

				writeInteger(this.DivAirportLandings, dos);

				// String

				writeString(this.DivReachedDest, dos);

				// String

				writeString(this.DivActualElapsedTime, dos);

				// String

				writeString(this.DivArrDelay, dos);

				// String

				writeString(this.DivDistance, dos);

				// String

				writeString(this.Div1Airport, dos);

				// String

				writeString(this.Div1AirportID, dos);

				// String

				writeString(this.Div1AirportSeqID, dos);

				// String

				writeString(this.Div1WheelsOn, dos);

				// String

				writeString(this.Div1TotalGTime, dos);

				// String

				writeString(this.Div1LongestGTime, dos);

				// String

				writeString(this.Div1WheelsOff, dos);

				// String

				writeString(this.Div1TailNum, dos);

				// String

				writeString(this.Div2Airport, dos);

				// String

				writeString(this.Div2AirportID, dos);

				// String

				writeString(this.Div2AirportSeqID, dos);

				// String

				writeString(this.Div2WheelsOn, dos);

				// String

				writeString(this.Div2TotalGTime, dos);

				// String

				writeString(this.Div2LongestGTime, dos);

				// String

				writeString(this.Div2WheelsOff, dos);

				// String

				writeString(this.Div2TailNum, dos);

				// String

				writeString(this.Div3Airport, dos);

				// String

				writeString(this.Div3AirportID, dos);

				// String

				writeString(this.Div3AirportSeqID, dos);

				// String

				writeString(this.Div3WheelsOn, dos);

				// String

				writeString(this.Div3TotalGTime, dos);

				// String

				writeString(this.Div3LongestGTime, dos);

				// String

				writeString(this.Div3WheelsOff, dos);

				// String

				writeString(this.Div3TailNum, dos);

				// String

				writeString(this.Div4Airport, dos);

				// String

				writeString(this.Div4AirportID, dos);

				// String

				writeString(this.Div4AirportSeqID, dos);

				// String

				writeString(this.Div4WheelsOn, dos);

				// String

				writeString(this.Div4TotalGTime, dos);

				// String

				writeString(this.Div4LongestGTime, dos);

				// String

				writeString(this.Div4WheelsOff, dos);

				// String

				writeString(this.Div4TailNum, dos);

				// String

				writeString(this.Div5Airport, dos);

				// String

				writeString(this.Div5AirportID, dos);

				// String

				writeString(this.Div5AirportSeqID, dos);

				// String

				writeString(this.Div5WheelsOn, dos);

				// String

				writeString(this.Div5TotalGTime, dos);

				// String

				writeString(this.Div5LongestGTime, dos);

				// String

				writeString(this.Div5WheelsOff, dos);

				// String

				writeString(this.Div5TailNum, dos);

				// String

				writeString(this.Duplicate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.Year, dos);

				// Integer

				writeInteger(this.Quarter, dos);

				// Integer

				writeInteger(this.Month, dos);

				// Integer

				writeInteger(this.DayofMonth, dos);

				// Integer

				writeInteger(this.DayOfWeek, dos);

				// java.util.Date

				writeDate(this.FlightDate, dos);

				// String

				writeString(this.Marketing_Airline_Network, dos);

				// String

				writeString(this.Operated_or_Branded_Code_Share_Partners, dos);

				// Integer

				writeInteger(this.DOT_ID_Marketing_Airline, dos);

				// String

				writeString(this.IATA_Code_Marketing_Airline, dos);

				// Integer

				writeInteger(this.Flight_Number_Marketing_Airline, dos);

				// String

				writeString(this.Originally_Scheduled_Code_Share_Airline, dos);

				// Integer

				writeInteger(this.DOT_ID_Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this.Operating_Airline, dos);

				// Integer

				writeInteger(this.DOT_ID_Operating_Airline, dos);

				// String

				writeString(this.IATA_Code_Operating_Airline, dos);

				// String

				writeString(this.Tail_Number, dos);

				// Integer

				writeInteger(this.Flight_Number_Operating_Airline, dos);

				// Integer

				writeInteger(this.OriginAirportID, dos);

				// Integer

				writeInteger(this.OriginAirportSeqID, dos);

				// Integer

				writeInteger(this.OriginCityMarketID, dos);

				// String

				writeString(this.Origin, dos);

				// String

				writeString(this.OriginCityName, dos);

				// String

				writeString(this.OriginState, dos);

				// Integer

				writeInteger(this.OriginStateFips, dos);

				// String

				writeString(this.OriginStateName, dos);

				// Integer

				writeInteger(this.OriginWac, dos);

				// Integer

				writeInteger(this.DestAirportID, dos);

				// Integer

				writeInteger(this.DestAirportSeqID, dos);

				// Integer

				writeInteger(this.DestCityMarketID, dos);

				// String

				writeString(this.Dest, dos);

				// String

				writeString(this.DestCityName, dos);

				// String

				writeString(this.DestState, dos);

				// Integer

				writeInteger(this.DestStateFips, dos);

				// String

				writeString(this.DestStateName, dos);

				// Integer

				writeInteger(this.DestWac, dos);

				// Integer

				writeInteger(this.CRSDepTime, dos);

				// Integer

				writeInteger(this.DepTime, dos);

				// Integer

				writeInteger(this.DepDelay, dos);

				// Integer

				writeInteger(this.DepDelayMinutes, dos);

				// Integer

				writeInteger(this.DepDel15, dos);

				// Integer

				writeInteger(this.DepartureDelayGroups, dos);

				// String

				writeString(this.DepTimeBlk, dos);

				// Integer

				writeInteger(this.TaxiOut, dos);

				// Integer

				writeInteger(this.WheelsOff, dos);

				// Integer

				writeInteger(this.WheelsOn, dos);

				// Integer

				writeInteger(this.TaxiIn, dos);

				// Integer

				writeInteger(this.CRSArrTime, dos);

				// Integer

				writeInteger(this.ArrTime, dos);

				// Integer

				writeInteger(this.ArrDelay, dos);

				// Integer

				writeInteger(this.ArrDelayMinutes, dos);

				// Integer

				writeInteger(this.ArrDel15, dos);

				// Integer

				writeInteger(this.ArrivalDelayGroups, dos);

				// String

				writeString(this.ArrTimeBlk, dos);

				// Integer

				writeInteger(this.Cancelled, dos);

				// String

				writeString(this.CancellationCode, dos);

				// Integer

				writeInteger(this.Diverted, dos);

				// Integer

				writeInteger(this.CRSElapsedTime, dos);

				// Integer

				writeInteger(this.ActualElapsedTime, dos);

				// Integer

				writeInteger(this.AirTime, dos);

				// Integer

				writeInteger(this.Flights, dos);

				// Integer

				writeInteger(this.Distance, dos);

				// Integer

				writeInteger(this.DistanceGroup, dos);

				// Integer

				writeInteger(this.CarrierDelay, dos);

				// Integer

				writeInteger(this.WeatherDelay, dos);

				// Integer

				writeInteger(this.NASDelay, dos);

				// Integer

				writeInteger(this.SecurityDelay, dos);

				// Integer

				writeInteger(this.LateAircraftDelay, dos);

				// Integer

				writeInteger(this.FirstDepTime, dos);

				// Integer

				writeInteger(this.TotalAddGTime, dos);

				// Integer

				writeInteger(this.LongestAddGTime, dos);

				// Integer

				writeInteger(this.DivAirportLandings, dos);

				// String

				writeString(this.DivReachedDest, dos);

				// String

				writeString(this.DivActualElapsedTime, dos);

				// String

				writeString(this.DivArrDelay, dos);

				// String

				writeString(this.DivDistance, dos);

				// String

				writeString(this.Div1Airport, dos);

				// String

				writeString(this.Div1AirportID, dos);

				// String

				writeString(this.Div1AirportSeqID, dos);

				// String

				writeString(this.Div1WheelsOn, dos);

				// String

				writeString(this.Div1TotalGTime, dos);

				// String

				writeString(this.Div1LongestGTime, dos);

				// String

				writeString(this.Div1WheelsOff, dos);

				// String

				writeString(this.Div1TailNum, dos);

				// String

				writeString(this.Div2Airport, dos);

				// String

				writeString(this.Div2AirportID, dos);

				// String

				writeString(this.Div2AirportSeqID, dos);

				// String

				writeString(this.Div2WheelsOn, dos);

				// String

				writeString(this.Div2TotalGTime, dos);

				// String

				writeString(this.Div2LongestGTime, dos);

				// String

				writeString(this.Div2WheelsOff, dos);

				// String

				writeString(this.Div2TailNum, dos);

				// String

				writeString(this.Div3Airport, dos);

				// String

				writeString(this.Div3AirportID, dos);

				// String

				writeString(this.Div3AirportSeqID, dos);

				// String

				writeString(this.Div3WheelsOn, dos);

				// String

				writeString(this.Div3TotalGTime, dos);

				// String

				writeString(this.Div3LongestGTime, dos);

				// String

				writeString(this.Div3WheelsOff, dos);

				// String

				writeString(this.Div3TailNum, dos);

				// String

				writeString(this.Div4Airport, dos);

				// String

				writeString(this.Div4AirportID, dos);

				// String

				writeString(this.Div4AirportSeqID, dos);

				// String

				writeString(this.Div4WheelsOn, dos);

				// String

				writeString(this.Div4TotalGTime, dos);

				// String

				writeString(this.Div4LongestGTime, dos);

				// String

				writeString(this.Div4WheelsOff, dos);

				// String

				writeString(this.Div4TailNum, dos);

				// String

				writeString(this.Div5Airport, dos);

				// String

				writeString(this.Div5AirportID, dos);

				// String

				writeString(this.Div5AirportSeqID, dos);

				// String

				writeString(this.Div5WheelsOn, dos);

				// String

				writeString(this.Div5TotalGTime, dos);

				// String

				writeString(this.Div5LongestGTime, dos);

				// String

				writeString(this.Div5WheelsOff, dos);

				// String

				writeString(this.Div5TailNum, dos);

				// String

				writeString(this.Duplicate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Year=" + String.valueOf(Year));
			sb.append(",Quarter=" + String.valueOf(Quarter));
			sb.append(",Month=" + String.valueOf(Month));
			sb.append(",DayofMonth=" + String.valueOf(DayofMonth));
			sb.append(",DayOfWeek=" + String.valueOf(DayOfWeek));
			sb.append(",FlightDate=" + String.valueOf(FlightDate));
			sb.append(",Marketing_Airline_Network=" + Marketing_Airline_Network);
			sb.append(",Operated_or_Branded_Code_Share_Partners=" + Operated_or_Branded_Code_Share_Partners);
			sb.append(",DOT_ID_Marketing_Airline=" + String.valueOf(DOT_ID_Marketing_Airline));
			sb.append(",IATA_Code_Marketing_Airline=" + IATA_Code_Marketing_Airline);
			sb.append(",Flight_Number_Marketing_Airline=" + String.valueOf(Flight_Number_Marketing_Airline));
			sb.append(",Originally_Scheduled_Code_Share_Airline=" + Originally_Scheduled_Code_Share_Airline);
			sb.append(",DOT_ID_Originally_Scheduled_Code_Share_Airline="
					+ String.valueOf(DOT_ID_Originally_Scheduled_Code_Share_Airline));
			sb.append(",IATA_Code_Originally_Scheduled_Code_Share_Airline="
					+ IATA_Code_Originally_Scheduled_Code_Share_Airline);
			sb.append(",Flight_Num_Originally_Scheduled_Code_Share_Airline="
					+ Flight_Num_Originally_Scheduled_Code_Share_Airline);
			sb.append(",Operating_Airline=" + Operating_Airline);
			sb.append(",DOT_ID_Operating_Airline=" + String.valueOf(DOT_ID_Operating_Airline));
			sb.append(",IATA_Code_Operating_Airline=" + IATA_Code_Operating_Airline);
			sb.append(",Tail_Number=" + Tail_Number);
			sb.append(",Flight_Number_Operating_Airline=" + String.valueOf(Flight_Number_Operating_Airline));
			sb.append(",OriginAirportID=" + String.valueOf(OriginAirportID));
			sb.append(",OriginAirportSeqID=" + String.valueOf(OriginAirportSeqID));
			sb.append(",OriginCityMarketID=" + String.valueOf(OriginCityMarketID));
			sb.append(",Origin=" + Origin);
			sb.append(",OriginCityName=" + OriginCityName);
			sb.append(",OriginState=" + OriginState);
			sb.append(",OriginStateFips=" + String.valueOf(OriginStateFips));
			sb.append(",OriginStateName=" + OriginStateName);
			sb.append(",OriginWac=" + String.valueOf(OriginWac));
			sb.append(",DestAirportID=" + String.valueOf(DestAirportID));
			sb.append(",DestAirportSeqID=" + String.valueOf(DestAirportSeqID));
			sb.append(",DestCityMarketID=" + String.valueOf(DestCityMarketID));
			sb.append(",Dest=" + Dest);
			sb.append(",DestCityName=" + DestCityName);
			sb.append(",DestState=" + DestState);
			sb.append(",DestStateFips=" + String.valueOf(DestStateFips));
			sb.append(",DestStateName=" + DestStateName);
			sb.append(",DestWac=" + String.valueOf(DestWac));
			sb.append(",CRSDepTime=" + String.valueOf(CRSDepTime));
			sb.append(",DepTime=" + String.valueOf(DepTime));
			sb.append(",DepDelay=" + String.valueOf(DepDelay));
			sb.append(",DepDelayMinutes=" + String.valueOf(DepDelayMinutes));
			sb.append(",DepDel15=" + String.valueOf(DepDel15));
			sb.append(",DepartureDelayGroups=" + String.valueOf(DepartureDelayGroups));
			sb.append(",DepTimeBlk=" + DepTimeBlk);
			sb.append(",TaxiOut=" + String.valueOf(TaxiOut));
			sb.append(",WheelsOff=" + String.valueOf(WheelsOff));
			sb.append(",WheelsOn=" + String.valueOf(WheelsOn));
			sb.append(",TaxiIn=" + String.valueOf(TaxiIn));
			sb.append(",CRSArrTime=" + String.valueOf(CRSArrTime));
			sb.append(",ArrTime=" + String.valueOf(ArrTime));
			sb.append(",ArrDelay=" + String.valueOf(ArrDelay));
			sb.append(",ArrDelayMinutes=" + String.valueOf(ArrDelayMinutes));
			sb.append(",ArrDel15=" + String.valueOf(ArrDel15));
			sb.append(",ArrivalDelayGroups=" + String.valueOf(ArrivalDelayGroups));
			sb.append(",ArrTimeBlk=" + ArrTimeBlk);
			sb.append(",Cancelled=" + String.valueOf(Cancelled));
			sb.append(",CancellationCode=" + CancellationCode);
			sb.append(",Diverted=" + String.valueOf(Diverted));
			sb.append(",CRSElapsedTime=" + String.valueOf(CRSElapsedTime));
			sb.append(",ActualElapsedTime=" + String.valueOf(ActualElapsedTime));
			sb.append(",AirTime=" + String.valueOf(AirTime));
			sb.append(",Flights=" + String.valueOf(Flights));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",DistanceGroup=" + String.valueOf(DistanceGroup));
			sb.append(",CarrierDelay=" + String.valueOf(CarrierDelay));
			sb.append(",WeatherDelay=" + String.valueOf(WeatherDelay));
			sb.append(",NASDelay=" + String.valueOf(NASDelay));
			sb.append(",SecurityDelay=" + String.valueOf(SecurityDelay));
			sb.append(",LateAircraftDelay=" + String.valueOf(LateAircraftDelay));
			sb.append(",FirstDepTime=" + String.valueOf(FirstDepTime));
			sb.append(",TotalAddGTime=" + String.valueOf(TotalAddGTime));
			sb.append(",LongestAddGTime=" + String.valueOf(LongestAddGTime));
			sb.append(",DivAirportLandings=" + String.valueOf(DivAirportLandings));
			sb.append(",DivReachedDest=" + DivReachedDest);
			sb.append(",DivActualElapsedTime=" + DivActualElapsedTime);
			sb.append(",DivArrDelay=" + DivArrDelay);
			sb.append(",DivDistance=" + DivDistance);
			sb.append(",Div1Airport=" + Div1Airport);
			sb.append(",Div1AirportID=" + Div1AirportID);
			sb.append(",Div1AirportSeqID=" + Div1AirportSeqID);
			sb.append(",Div1WheelsOn=" + Div1WheelsOn);
			sb.append(",Div1TotalGTime=" + Div1TotalGTime);
			sb.append(",Div1LongestGTime=" + Div1LongestGTime);
			sb.append(",Div1WheelsOff=" + Div1WheelsOff);
			sb.append(",Div1TailNum=" + Div1TailNum);
			sb.append(",Div2Airport=" + Div2Airport);
			sb.append(",Div2AirportID=" + Div2AirportID);
			sb.append(",Div2AirportSeqID=" + Div2AirportSeqID);
			sb.append(",Div2WheelsOn=" + Div2WheelsOn);
			sb.append(",Div2TotalGTime=" + Div2TotalGTime);
			sb.append(",Div2LongestGTime=" + Div2LongestGTime);
			sb.append(",Div2WheelsOff=" + Div2WheelsOff);
			sb.append(",Div2TailNum=" + Div2TailNum);
			sb.append(",Div3Airport=" + Div3Airport);
			sb.append(",Div3AirportID=" + Div3AirportID);
			sb.append(",Div3AirportSeqID=" + Div3AirportSeqID);
			sb.append(",Div3WheelsOn=" + Div3WheelsOn);
			sb.append(",Div3TotalGTime=" + Div3TotalGTime);
			sb.append(",Div3LongestGTime=" + Div3LongestGTime);
			sb.append(",Div3WheelsOff=" + Div3WheelsOff);
			sb.append(",Div3TailNum=" + Div3TailNum);
			sb.append(",Div4Airport=" + Div4Airport);
			sb.append(",Div4AirportID=" + Div4AirportID);
			sb.append(",Div4AirportSeqID=" + Div4AirportSeqID);
			sb.append(",Div4WheelsOn=" + Div4WheelsOn);
			sb.append(",Div4TotalGTime=" + Div4TotalGTime);
			sb.append(",Div4LongestGTime=" + Div4LongestGTime);
			sb.append(",Div4WheelsOff=" + Div4WheelsOff);
			sb.append(",Div4TailNum=" + Div4TailNum);
			sb.append(",Div5Airport=" + Div5Airport);
			sb.append(",Div5AirportID=" + Div5AirportID);
			sb.append(",Div5AirportSeqID=" + Div5AirportSeqID);
			sb.append(",Div5WheelsOn=" + Div5WheelsOn);
			sb.append(",Div5TotalGTime=" + Div5TotalGTime);
			sb.append(",Div5LongestGTime=" + Div5LongestGTime);
			sb.append(",Div5WheelsOff=" + Div5WheelsOff);
			sb.append(",Div5TailNum=" + Div5TailNum);
			sb.append(",Duplicate=" + Duplicate);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
		final static byte[] commonByteArrayLock_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift = new byte[0];
		static byte[] commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift = new byte[0];

		public Integer Year;

		public Integer getYear() {
			return this.Year;
		}

		public Integer Quarter;

		public Integer getQuarter() {
			return this.Quarter;
		}

		public Integer Month;

		public Integer getMonth() {
			return this.Month;
		}

		public Integer DayofMonth;

		public Integer getDayofMonth() {
			return this.DayofMonth;
		}

		public Integer DayOfWeek;

		public Integer getDayOfWeek() {
			return this.DayOfWeek;
		}

		public java.util.Date FlightDate;

		public java.util.Date getFlightDate() {
			return this.FlightDate;
		}

		public String Marketing_Airline_Network;

		public String getMarketing_Airline_Network() {
			return this.Marketing_Airline_Network;
		}

		public String Operated_or_Branded_Code_Share_Partners;

		public String getOperated_or_Branded_Code_Share_Partners() {
			return this.Operated_or_Branded_Code_Share_Partners;
		}

		public Integer DOT_ID_Marketing_Airline;

		public Integer getDOT_ID_Marketing_Airline() {
			return this.DOT_ID_Marketing_Airline;
		}

		public String IATA_Code_Marketing_Airline;

		public String getIATA_Code_Marketing_Airline() {
			return this.IATA_Code_Marketing_Airline;
		}

		public Integer Flight_Number_Marketing_Airline;

		public Integer getFlight_Number_Marketing_Airline() {
			return this.Flight_Number_Marketing_Airline;
		}

		public String Originally_Scheduled_Code_Share_Airline;

		public String getOriginally_Scheduled_Code_Share_Airline() {
			return this.Originally_Scheduled_Code_Share_Airline;
		}

		public Integer DOT_ID_Originally_Scheduled_Code_Share_Airline;

		public Integer getDOT_ID_Originally_Scheduled_Code_Share_Airline() {
			return this.DOT_ID_Originally_Scheduled_Code_Share_Airline;
		}

		public String IATA_Code_Originally_Scheduled_Code_Share_Airline;

		public String getIATA_Code_Originally_Scheduled_Code_Share_Airline() {
			return this.IATA_Code_Originally_Scheduled_Code_Share_Airline;
		}

		public String Flight_Num_Originally_Scheduled_Code_Share_Airline;

		public String getFlight_Num_Originally_Scheduled_Code_Share_Airline() {
			return this.Flight_Num_Originally_Scheduled_Code_Share_Airline;
		}

		public String Operating_Airline;

		public String getOperating_Airline() {
			return this.Operating_Airline;
		}

		public Integer DOT_ID_Operating_Airline;

		public Integer getDOT_ID_Operating_Airline() {
			return this.DOT_ID_Operating_Airline;
		}

		public String IATA_Code_Operating_Airline;

		public String getIATA_Code_Operating_Airline() {
			return this.IATA_Code_Operating_Airline;
		}

		public String Tail_Number;

		public String getTail_Number() {
			return this.Tail_Number;
		}

		public Integer Flight_Number_Operating_Airline;

		public Integer getFlight_Number_Operating_Airline() {
			return this.Flight_Number_Operating_Airline;
		}

		public Integer OriginAirportID;

		public Integer getOriginAirportID() {
			return this.OriginAirportID;
		}

		public Integer OriginAirportSeqID;

		public Integer getOriginAirportSeqID() {
			return this.OriginAirportSeqID;
		}

		public Integer OriginCityMarketID;

		public Integer getOriginCityMarketID() {
			return this.OriginCityMarketID;
		}

		public String Origin;

		public String getOrigin() {
			return this.Origin;
		}

		public String OriginCityName;

		public String getOriginCityName() {
			return this.OriginCityName;
		}

		public String OriginState;

		public String getOriginState() {
			return this.OriginState;
		}

		public Integer OriginStateFips;

		public Integer getOriginStateFips() {
			return this.OriginStateFips;
		}

		public String OriginStateName;

		public String getOriginStateName() {
			return this.OriginStateName;
		}

		public Integer OriginWac;

		public Integer getOriginWac() {
			return this.OriginWac;
		}

		public Integer DestAirportID;

		public Integer getDestAirportID() {
			return this.DestAirportID;
		}

		public Integer DestAirportSeqID;

		public Integer getDestAirportSeqID() {
			return this.DestAirportSeqID;
		}

		public Integer DestCityMarketID;

		public Integer getDestCityMarketID() {
			return this.DestCityMarketID;
		}

		public String Dest;

		public String getDest() {
			return this.Dest;
		}

		public String DestCityName;

		public String getDestCityName() {
			return this.DestCityName;
		}

		public String DestState;

		public String getDestState() {
			return this.DestState;
		}

		public Integer DestStateFips;

		public Integer getDestStateFips() {
			return this.DestStateFips;
		}

		public String DestStateName;

		public String getDestStateName() {
			return this.DestStateName;
		}

		public Integer DestWac;

		public Integer getDestWac() {
			return this.DestWac;
		}

		public Integer CRSDepTime;

		public Integer getCRSDepTime() {
			return this.CRSDepTime;
		}

		public Integer DepTime;

		public Integer getDepTime() {
			return this.DepTime;
		}

		public Integer DepDelay;

		public Integer getDepDelay() {
			return this.DepDelay;
		}

		public Integer DepDelayMinutes;

		public Integer getDepDelayMinutes() {
			return this.DepDelayMinutes;
		}

		public Integer DepDel15;

		public Integer getDepDel15() {
			return this.DepDel15;
		}

		public Integer DepartureDelayGroups;

		public Integer getDepartureDelayGroups() {
			return this.DepartureDelayGroups;
		}

		public String DepTimeBlk;

		public String getDepTimeBlk() {
			return this.DepTimeBlk;
		}

		public Integer TaxiOut;

		public Integer getTaxiOut() {
			return this.TaxiOut;
		}

		public Integer WheelsOff;

		public Integer getWheelsOff() {
			return this.WheelsOff;
		}

		public Integer WheelsOn;

		public Integer getWheelsOn() {
			return this.WheelsOn;
		}

		public Integer TaxiIn;

		public Integer getTaxiIn() {
			return this.TaxiIn;
		}

		public Integer CRSArrTime;

		public Integer getCRSArrTime() {
			return this.CRSArrTime;
		}

		public Integer ArrTime;

		public Integer getArrTime() {
			return this.ArrTime;
		}

		public Integer ArrDelay;

		public Integer getArrDelay() {
			return this.ArrDelay;
		}

		public Integer ArrDelayMinutes;

		public Integer getArrDelayMinutes() {
			return this.ArrDelayMinutes;
		}

		public Integer ArrDel15;

		public Integer getArrDel15() {
			return this.ArrDel15;
		}

		public Integer ArrivalDelayGroups;

		public Integer getArrivalDelayGroups() {
			return this.ArrivalDelayGroups;
		}

		public String ArrTimeBlk;

		public String getArrTimeBlk() {
			return this.ArrTimeBlk;
		}

		public Integer Cancelled;

		public Integer getCancelled() {
			return this.Cancelled;
		}

		public String CancellationCode;

		public String getCancellationCode() {
			return this.CancellationCode;
		}

		public Integer Diverted;

		public Integer getDiverted() {
			return this.Diverted;
		}

		public Integer CRSElapsedTime;

		public Integer getCRSElapsedTime() {
			return this.CRSElapsedTime;
		}

		public Integer ActualElapsedTime;

		public Integer getActualElapsedTime() {
			return this.ActualElapsedTime;
		}

		public Integer AirTime;

		public Integer getAirTime() {
			return this.AirTime;
		}

		public Integer Flights;

		public Integer getFlights() {
			return this.Flights;
		}

		public Integer Distance;

		public Integer getDistance() {
			return this.Distance;
		}

		public Integer DistanceGroup;

		public Integer getDistanceGroup() {
			return this.DistanceGroup;
		}

		public Integer CarrierDelay;

		public Integer getCarrierDelay() {
			return this.CarrierDelay;
		}

		public Integer WeatherDelay;

		public Integer getWeatherDelay() {
			return this.WeatherDelay;
		}

		public Integer NASDelay;

		public Integer getNASDelay() {
			return this.NASDelay;
		}

		public Integer SecurityDelay;

		public Integer getSecurityDelay() {
			return this.SecurityDelay;
		}

		public Integer LateAircraftDelay;

		public Integer getLateAircraftDelay() {
			return this.LateAircraftDelay;
		}

		public Integer FirstDepTime;

		public Integer getFirstDepTime() {
			return this.FirstDepTime;
		}

		public Integer TotalAddGTime;

		public Integer getTotalAddGTime() {
			return this.TotalAddGTime;
		}

		public Integer LongestAddGTime;

		public Integer getLongestAddGTime() {
			return this.LongestAddGTime;
		}

		public Integer DivAirportLandings;

		public Integer getDivAirportLandings() {
			return this.DivAirportLandings;
		}

		public String DivReachedDest;

		public String getDivReachedDest() {
			return this.DivReachedDest;
		}

		public String DivActualElapsedTime;

		public String getDivActualElapsedTime() {
			return this.DivActualElapsedTime;
		}

		public String DivArrDelay;

		public String getDivArrDelay() {
			return this.DivArrDelay;
		}

		public String DivDistance;

		public String getDivDistance() {
			return this.DivDistance;
		}

		public String Div1Airport;

		public String getDiv1Airport() {
			return this.Div1Airport;
		}

		public String Div1AirportID;

		public String getDiv1AirportID() {
			return this.Div1AirportID;
		}

		public String Div1AirportSeqID;

		public String getDiv1AirportSeqID() {
			return this.Div1AirportSeqID;
		}

		public String Div1WheelsOn;

		public String getDiv1WheelsOn() {
			return this.Div1WheelsOn;
		}

		public String Div1TotalGTime;

		public String getDiv1TotalGTime() {
			return this.Div1TotalGTime;
		}

		public String Div1LongestGTime;

		public String getDiv1LongestGTime() {
			return this.Div1LongestGTime;
		}

		public String Div1WheelsOff;

		public String getDiv1WheelsOff() {
			return this.Div1WheelsOff;
		}

		public String Div1TailNum;

		public String getDiv1TailNum() {
			return this.Div1TailNum;
		}

		public String Div2Airport;

		public String getDiv2Airport() {
			return this.Div2Airport;
		}

		public String Div2AirportID;

		public String getDiv2AirportID() {
			return this.Div2AirportID;
		}

		public String Div2AirportSeqID;

		public String getDiv2AirportSeqID() {
			return this.Div2AirportSeqID;
		}

		public String Div2WheelsOn;

		public String getDiv2WheelsOn() {
			return this.Div2WheelsOn;
		}

		public String Div2TotalGTime;

		public String getDiv2TotalGTime() {
			return this.Div2TotalGTime;
		}

		public String Div2LongestGTime;

		public String getDiv2LongestGTime() {
			return this.Div2LongestGTime;
		}

		public String Div2WheelsOff;

		public String getDiv2WheelsOff() {
			return this.Div2WheelsOff;
		}

		public String Div2TailNum;

		public String getDiv2TailNum() {
			return this.Div2TailNum;
		}

		public String Div3Airport;

		public String getDiv3Airport() {
			return this.Div3Airport;
		}

		public String Div3AirportID;

		public String getDiv3AirportID() {
			return this.Div3AirportID;
		}

		public String Div3AirportSeqID;

		public String getDiv3AirportSeqID() {
			return this.Div3AirportSeqID;
		}

		public String Div3WheelsOn;

		public String getDiv3WheelsOn() {
			return this.Div3WheelsOn;
		}

		public String Div3TotalGTime;

		public String getDiv3TotalGTime() {
			return this.Div3TotalGTime;
		}

		public String Div3LongestGTime;

		public String getDiv3LongestGTime() {
			return this.Div3LongestGTime;
		}

		public String Div3WheelsOff;

		public String getDiv3WheelsOff() {
			return this.Div3WheelsOff;
		}

		public String Div3TailNum;

		public String getDiv3TailNum() {
			return this.Div3TailNum;
		}

		public String Div4Airport;

		public String getDiv4Airport() {
			return this.Div4Airport;
		}

		public String Div4AirportID;

		public String getDiv4AirportID() {
			return this.Div4AirportID;
		}

		public String Div4AirportSeqID;

		public String getDiv4AirportSeqID() {
			return this.Div4AirportSeqID;
		}

		public String Div4WheelsOn;

		public String getDiv4WheelsOn() {
			return this.Div4WheelsOn;
		}

		public String Div4TotalGTime;

		public String getDiv4TotalGTime() {
			return this.Div4TotalGTime;
		}

		public String Div4LongestGTime;

		public String getDiv4LongestGTime() {
			return this.Div4LongestGTime;
		}

		public String Div4WheelsOff;

		public String getDiv4WheelsOff() {
			return this.Div4WheelsOff;
		}

		public String Div4TailNum;

		public String getDiv4TailNum() {
			return this.Div4TailNum;
		}

		public String Div5Airport;

		public String getDiv5Airport() {
			return this.Div5Airport;
		}

		public String Div5AirportID;

		public String getDiv5AirportID() {
			return this.Div5AirportID;
		}

		public String Div5AirportSeqID;

		public String getDiv5AirportSeqID() {
			return this.Div5AirportSeqID;
		}

		public String Div5WheelsOn;

		public String getDiv5WheelsOn() {
			return this.Div5WheelsOn;
		}

		public String Div5TotalGTime;

		public String getDiv5TotalGTime() {
			return this.Div5TotalGTime;
		}

		public String Div5LongestGTime;

		public String getDiv5LongestGTime() {
			return this.Div5LongestGTime;
		}

		public String Div5WheelsOff;

		public String getDiv5WheelsOff() {
			return this.Div5WheelsOff;
		}

		public String Div5TailNum;

		public String getDiv5TailNum() {
			return this.Div5TailNum;
		}

		public String Duplicate;

		public String getDuplicate() {
			return this.Duplicate;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift.length) {
					if (length < 1024 && commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift.length == 0) {
						commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift = new byte[1024];
					} else {
						commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift, 0, length);
				strReturn = new String(commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift.length) {
					if (length < 1024 && commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift.length == 0) {
						commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift = new byte[1024];
					} else {
						commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift, 0, length);
				strReturn = new String(commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift) {

				try {

					int length = 0;

					this.Year = readInteger(dis);

					this.Quarter = readInteger(dis);

					this.Month = readInteger(dis);

					this.DayofMonth = readInteger(dis);

					this.DayOfWeek = readInteger(dis);

					this.FlightDate = readDate(dis);

					this.Marketing_Airline_Network = readString(dis);

					this.Operated_or_Branded_Code_Share_Partners = readString(dis);

					this.DOT_ID_Marketing_Airline = readInteger(dis);

					this.IATA_Code_Marketing_Airline = readString(dis);

					this.Flight_Number_Marketing_Airline = readInteger(dis);

					this.Originally_Scheduled_Code_Share_Airline = readString(dis);

					this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readInteger(dis);

					this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);

					this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);

					this.Operating_Airline = readString(dis);

					this.DOT_ID_Operating_Airline = readInteger(dis);

					this.IATA_Code_Operating_Airline = readString(dis);

					this.Tail_Number = readString(dis);

					this.Flight_Number_Operating_Airline = readInteger(dis);

					this.OriginAirportID = readInteger(dis);

					this.OriginAirportSeqID = readInteger(dis);

					this.OriginCityMarketID = readInteger(dis);

					this.Origin = readString(dis);

					this.OriginCityName = readString(dis);

					this.OriginState = readString(dis);

					this.OriginStateFips = readInteger(dis);

					this.OriginStateName = readString(dis);

					this.OriginWac = readInteger(dis);

					this.DestAirportID = readInteger(dis);

					this.DestAirportSeqID = readInteger(dis);

					this.DestCityMarketID = readInteger(dis);

					this.Dest = readString(dis);

					this.DestCityName = readString(dis);

					this.DestState = readString(dis);

					this.DestStateFips = readInteger(dis);

					this.DestStateName = readString(dis);

					this.DestWac = readInteger(dis);

					this.CRSDepTime = readInteger(dis);

					this.DepTime = readInteger(dis);

					this.DepDelay = readInteger(dis);

					this.DepDelayMinutes = readInteger(dis);

					this.DepDel15 = readInteger(dis);

					this.DepartureDelayGroups = readInteger(dis);

					this.DepTimeBlk = readString(dis);

					this.TaxiOut = readInteger(dis);

					this.WheelsOff = readInteger(dis);

					this.WheelsOn = readInteger(dis);

					this.TaxiIn = readInteger(dis);

					this.CRSArrTime = readInteger(dis);

					this.ArrTime = readInteger(dis);

					this.ArrDelay = readInteger(dis);

					this.ArrDelayMinutes = readInteger(dis);

					this.ArrDel15 = readInteger(dis);

					this.ArrivalDelayGroups = readInteger(dis);

					this.ArrTimeBlk = readString(dis);

					this.Cancelled = readInteger(dis);

					this.CancellationCode = readString(dis);

					this.Diverted = readInteger(dis);

					this.CRSElapsedTime = readInteger(dis);

					this.ActualElapsedTime = readInteger(dis);

					this.AirTime = readInteger(dis);

					this.Flights = readInteger(dis);

					this.Distance = readInteger(dis);

					this.DistanceGroup = readInteger(dis);

					this.CarrierDelay = readInteger(dis);

					this.WeatherDelay = readInteger(dis);

					this.NASDelay = readInteger(dis);

					this.SecurityDelay = readInteger(dis);

					this.LateAircraftDelay = readInteger(dis);

					this.FirstDepTime = readInteger(dis);

					this.TotalAddGTime = readInteger(dis);

					this.LongestAddGTime = readInteger(dis);

					this.DivAirportLandings = readInteger(dis);

					this.DivReachedDest = readString(dis);

					this.DivActualElapsedTime = readString(dis);

					this.DivArrDelay = readString(dis);

					this.DivDistance = readString(dis);

					this.Div1Airport = readString(dis);

					this.Div1AirportID = readString(dis);

					this.Div1AirportSeqID = readString(dis);

					this.Div1WheelsOn = readString(dis);

					this.Div1TotalGTime = readString(dis);

					this.Div1LongestGTime = readString(dis);

					this.Div1WheelsOff = readString(dis);

					this.Div1TailNum = readString(dis);

					this.Div2Airport = readString(dis);

					this.Div2AirportID = readString(dis);

					this.Div2AirportSeqID = readString(dis);

					this.Div2WheelsOn = readString(dis);

					this.Div2TotalGTime = readString(dis);

					this.Div2LongestGTime = readString(dis);

					this.Div2WheelsOff = readString(dis);

					this.Div2TailNum = readString(dis);

					this.Div3Airport = readString(dis);

					this.Div3AirportID = readString(dis);

					this.Div3AirportSeqID = readString(dis);

					this.Div3WheelsOn = readString(dis);

					this.Div3TotalGTime = readString(dis);

					this.Div3LongestGTime = readString(dis);

					this.Div3WheelsOff = readString(dis);

					this.Div3TailNum = readString(dis);

					this.Div4Airport = readString(dis);

					this.Div4AirportID = readString(dis);

					this.Div4AirportSeqID = readString(dis);

					this.Div4WheelsOn = readString(dis);

					this.Div4TotalGTime = readString(dis);

					this.Div4LongestGTime = readString(dis);

					this.Div4WheelsOff = readString(dis);

					this.Div4TailNum = readString(dis);

					this.Div5Airport = readString(dis);

					this.Div5AirportID = readString(dis);

					this.Div5AirportSeqID = readString(dis);

					this.Div5WheelsOn = readString(dis);

					this.Div5TotalGTime = readString(dis);

					this.Div5LongestGTime = readString(dis);

					this.Div5WheelsOff = readString(dis);

					this.Div5TailNum = readString(dis);

					this.Duplicate = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift) {

				try {

					int length = 0;

					this.Year = readInteger(dis);

					this.Quarter = readInteger(dis);

					this.Month = readInteger(dis);

					this.DayofMonth = readInteger(dis);

					this.DayOfWeek = readInteger(dis);

					this.FlightDate = readDate(dis);

					this.Marketing_Airline_Network = readString(dis);

					this.Operated_or_Branded_Code_Share_Partners = readString(dis);

					this.DOT_ID_Marketing_Airline = readInteger(dis);

					this.IATA_Code_Marketing_Airline = readString(dis);

					this.Flight_Number_Marketing_Airline = readInteger(dis);

					this.Originally_Scheduled_Code_Share_Airline = readString(dis);

					this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readInteger(dis);

					this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);

					this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);

					this.Operating_Airline = readString(dis);

					this.DOT_ID_Operating_Airline = readInteger(dis);

					this.IATA_Code_Operating_Airline = readString(dis);

					this.Tail_Number = readString(dis);

					this.Flight_Number_Operating_Airline = readInteger(dis);

					this.OriginAirportID = readInteger(dis);

					this.OriginAirportSeqID = readInteger(dis);

					this.OriginCityMarketID = readInteger(dis);

					this.Origin = readString(dis);

					this.OriginCityName = readString(dis);

					this.OriginState = readString(dis);

					this.OriginStateFips = readInteger(dis);

					this.OriginStateName = readString(dis);

					this.OriginWac = readInteger(dis);

					this.DestAirportID = readInteger(dis);

					this.DestAirportSeqID = readInteger(dis);

					this.DestCityMarketID = readInteger(dis);

					this.Dest = readString(dis);

					this.DestCityName = readString(dis);

					this.DestState = readString(dis);

					this.DestStateFips = readInteger(dis);

					this.DestStateName = readString(dis);

					this.DestWac = readInteger(dis);

					this.CRSDepTime = readInteger(dis);

					this.DepTime = readInteger(dis);

					this.DepDelay = readInteger(dis);

					this.DepDelayMinutes = readInteger(dis);

					this.DepDel15 = readInteger(dis);

					this.DepartureDelayGroups = readInteger(dis);

					this.DepTimeBlk = readString(dis);

					this.TaxiOut = readInteger(dis);

					this.WheelsOff = readInteger(dis);

					this.WheelsOn = readInteger(dis);

					this.TaxiIn = readInteger(dis);

					this.CRSArrTime = readInteger(dis);

					this.ArrTime = readInteger(dis);

					this.ArrDelay = readInteger(dis);

					this.ArrDelayMinutes = readInteger(dis);

					this.ArrDel15 = readInteger(dis);

					this.ArrivalDelayGroups = readInteger(dis);

					this.ArrTimeBlk = readString(dis);

					this.Cancelled = readInteger(dis);

					this.CancellationCode = readString(dis);

					this.Diverted = readInteger(dis);

					this.CRSElapsedTime = readInteger(dis);

					this.ActualElapsedTime = readInteger(dis);

					this.AirTime = readInteger(dis);

					this.Flights = readInteger(dis);

					this.Distance = readInteger(dis);

					this.DistanceGroup = readInteger(dis);

					this.CarrierDelay = readInteger(dis);

					this.WeatherDelay = readInteger(dis);

					this.NASDelay = readInteger(dis);

					this.SecurityDelay = readInteger(dis);

					this.LateAircraftDelay = readInteger(dis);

					this.FirstDepTime = readInteger(dis);

					this.TotalAddGTime = readInteger(dis);

					this.LongestAddGTime = readInteger(dis);

					this.DivAirportLandings = readInteger(dis);

					this.DivReachedDest = readString(dis);

					this.DivActualElapsedTime = readString(dis);

					this.DivArrDelay = readString(dis);

					this.DivDistance = readString(dis);

					this.Div1Airport = readString(dis);

					this.Div1AirportID = readString(dis);

					this.Div1AirportSeqID = readString(dis);

					this.Div1WheelsOn = readString(dis);

					this.Div1TotalGTime = readString(dis);

					this.Div1LongestGTime = readString(dis);

					this.Div1WheelsOff = readString(dis);

					this.Div1TailNum = readString(dis);

					this.Div2Airport = readString(dis);

					this.Div2AirportID = readString(dis);

					this.Div2AirportSeqID = readString(dis);

					this.Div2WheelsOn = readString(dis);

					this.Div2TotalGTime = readString(dis);

					this.Div2LongestGTime = readString(dis);

					this.Div2WheelsOff = readString(dis);

					this.Div2TailNum = readString(dis);

					this.Div3Airport = readString(dis);

					this.Div3AirportID = readString(dis);

					this.Div3AirportSeqID = readString(dis);

					this.Div3WheelsOn = readString(dis);

					this.Div3TotalGTime = readString(dis);

					this.Div3LongestGTime = readString(dis);

					this.Div3WheelsOff = readString(dis);

					this.Div3TailNum = readString(dis);

					this.Div4Airport = readString(dis);

					this.Div4AirportID = readString(dis);

					this.Div4AirportSeqID = readString(dis);

					this.Div4WheelsOn = readString(dis);

					this.Div4TotalGTime = readString(dis);

					this.Div4LongestGTime = readString(dis);

					this.Div4WheelsOff = readString(dis);

					this.Div4TailNum = readString(dis);

					this.Div5Airport = readString(dis);

					this.Div5AirportID = readString(dis);

					this.Div5AirportSeqID = readString(dis);

					this.Div5WheelsOn = readString(dis);

					this.Div5TotalGTime = readString(dis);

					this.Div5LongestGTime = readString(dis);

					this.Div5WheelsOff = readString(dis);

					this.Div5TailNum = readString(dis);

					this.Duplicate = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Year, dos);

				// Integer

				writeInteger(this.Quarter, dos);

				// Integer

				writeInteger(this.Month, dos);

				// Integer

				writeInteger(this.DayofMonth, dos);

				// Integer

				writeInteger(this.DayOfWeek, dos);

				// java.util.Date

				writeDate(this.FlightDate, dos);

				// String

				writeString(this.Marketing_Airline_Network, dos);

				// String

				writeString(this.Operated_or_Branded_Code_Share_Partners, dos);

				// Integer

				writeInteger(this.DOT_ID_Marketing_Airline, dos);

				// String

				writeString(this.IATA_Code_Marketing_Airline, dos);

				// Integer

				writeInteger(this.Flight_Number_Marketing_Airline, dos);

				// String

				writeString(this.Originally_Scheduled_Code_Share_Airline, dos);

				// Integer

				writeInteger(this.DOT_ID_Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this.Operating_Airline, dos);

				// Integer

				writeInteger(this.DOT_ID_Operating_Airline, dos);

				// String

				writeString(this.IATA_Code_Operating_Airline, dos);

				// String

				writeString(this.Tail_Number, dos);

				// Integer

				writeInteger(this.Flight_Number_Operating_Airline, dos);

				// Integer

				writeInteger(this.OriginAirportID, dos);

				// Integer

				writeInteger(this.OriginAirportSeqID, dos);

				// Integer

				writeInteger(this.OriginCityMarketID, dos);

				// String

				writeString(this.Origin, dos);

				// String

				writeString(this.OriginCityName, dos);

				// String

				writeString(this.OriginState, dos);

				// Integer

				writeInteger(this.OriginStateFips, dos);

				// String

				writeString(this.OriginStateName, dos);

				// Integer

				writeInteger(this.OriginWac, dos);

				// Integer

				writeInteger(this.DestAirportID, dos);

				// Integer

				writeInteger(this.DestAirportSeqID, dos);

				// Integer

				writeInteger(this.DestCityMarketID, dos);

				// String

				writeString(this.Dest, dos);

				// String

				writeString(this.DestCityName, dos);

				// String

				writeString(this.DestState, dos);

				// Integer

				writeInteger(this.DestStateFips, dos);

				// String

				writeString(this.DestStateName, dos);

				// Integer

				writeInteger(this.DestWac, dos);

				// Integer

				writeInteger(this.CRSDepTime, dos);

				// Integer

				writeInteger(this.DepTime, dos);

				// Integer

				writeInteger(this.DepDelay, dos);

				// Integer

				writeInteger(this.DepDelayMinutes, dos);

				// Integer

				writeInteger(this.DepDel15, dos);

				// Integer

				writeInteger(this.DepartureDelayGroups, dos);

				// String

				writeString(this.DepTimeBlk, dos);

				// Integer

				writeInteger(this.TaxiOut, dos);

				// Integer

				writeInteger(this.WheelsOff, dos);

				// Integer

				writeInteger(this.WheelsOn, dos);

				// Integer

				writeInteger(this.TaxiIn, dos);

				// Integer

				writeInteger(this.CRSArrTime, dos);

				// Integer

				writeInteger(this.ArrTime, dos);

				// Integer

				writeInteger(this.ArrDelay, dos);

				// Integer

				writeInteger(this.ArrDelayMinutes, dos);

				// Integer

				writeInteger(this.ArrDel15, dos);

				// Integer

				writeInteger(this.ArrivalDelayGroups, dos);

				// String

				writeString(this.ArrTimeBlk, dos);

				// Integer

				writeInteger(this.Cancelled, dos);

				// String

				writeString(this.CancellationCode, dos);

				// Integer

				writeInteger(this.Diverted, dos);

				// Integer

				writeInteger(this.CRSElapsedTime, dos);

				// Integer

				writeInteger(this.ActualElapsedTime, dos);

				// Integer

				writeInteger(this.AirTime, dos);

				// Integer

				writeInteger(this.Flights, dos);

				// Integer

				writeInteger(this.Distance, dos);

				// Integer

				writeInteger(this.DistanceGroup, dos);

				// Integer

				writeInteger(this.CarrierDelay, dos);

				// Integer

				writeInteger(this.WeatherDelay, dos);

				// Integer

				writeInteger(this.NASDelay, dos);

				// Integer

				writeInteger(this.SecurityDelay, dos);

				// Integer

				writeInteger(this.LateAircraftDelay, dos);

				// Integer

				writeInteger(this.FirstDepTime, dos);

				// Integer

				writeInteger(this.TotalAddGTime, dos);

				// Integer

				writeInteger(this.LongestAddGTime, dos);

				// Integer

				writeInteger(this.DivAirportLandings, dos);

				// String

				writeString(this.DivReachedDest, dos);

				// String

				writeString(this.DivActualElapsedTime, dos);

				// String

				writeString(this.DivArrDelay, dos);

				// String

				writeString(this.DivDistance, dos);

				// String

				writeString(this.Div1Airport, dos);

				// String

				writeString(this.Div1AirportID, dos);

				// String

				writeString(this.Div1AirportSeqID, dos);

				// String

				writeString(this.Div1WheelsOn, dos);

				// String

				writeString(this.Div1TotalGTime, dos);

				// String

				writeString(this.Div1LongestGTime, dos);

				// String

				writeString(this.Div1WheelsOff, dos);

				// String

				writeString(this.Div1TailNum, dos);

				// String

				writeString(this.Div2Airport, dos);

				// String

				writeString(this.Div2AirportID, dos);

				// String

				writeString(this.Div2AirportSeqID, dos);

				// String

				writeString(this.Div2WheelsOn, dos);

				// String

				writeString(this.Div2TotalGTime, dos);

				// String

				writeString(this.Div2LongestGTime, dos);

				// String

				writeString(this.Div2WheelsOff, dos);

				// String

				writeString(this.Div2TailNum, dos);

				// String

				writeString(this.Div3Airport, dos);

				// String

				writeString(this.Div3AirportID, dos);

				// String

				writeString(this.Div3AirportSeqID, dos);

				// String

				writeString(this.Div3WheelsOn, dos);

				// String

				writeString(this.Div3TotalGTime, dos);

				// String

				writeString(this.Div3LongestGTime, dos);

				// String

				writeString(this.Div3WheelsOff, dos);

				// String

				writeString(this.Div3TailNum, dos);

				// String

				writeString(this.Div4Airport, dos);

				// String

				writeString(this.Div4AirportID, dos);

				// String

				writeString(this.Div4AirportSeqID, dos);

				// String

				writeString(this.Div4WheelsOn, dos);

				// String

				writeString(this.Div4TotalGTime, dos);

				// String

				writeString(this.Div4LongestGTime, dos);

				// String

				writeString(this.Div4WheelsOff, dos);

				// String

				writeString(this.Div4TailNum, dos);

				// String

				writeString(this.Div5Airport, dos);

				// String

				writeString(this.Div5AirportID, dos);

				// String

				writeString(this.Div5AirportSeqID, dos);

				// String

				writeString(this.Div5WheelsOn, dos);

				// String

				writeString(this.Div5TotalGTime, dos);

				// String

				writeString(this.Div5LongestGTime, dos);

				// String

				writeString(this.Div5WheelsOff, dos);

				// String

				writeString(this.Div5TailNum, dos);

				// String

				writeString(this.Duplicate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.Year, dos);

				// Integer

				writeInteger(this.Quarter, dos);

				// Integer

				writeInteger(this.Month, dos);

				// Integer

				writeInteger(this.DayofMonth, dos);

				// Integer

				writeInteger(this.DayOfWeek, dos);

				// java.util.Date

				writeDate(this.FlightDate, dos);

				// String

				writeString(this.Marketing_Airline_Network, dos);

				// String

				writeString(this.Operated_or_Branded_Code_Share_Partners, dos);

				// Integer

				writeInteger(this.DOT_ID_Marketing_Airline, dos);

				// String

				writeString(this.IATA_Code_Marketing_Airline, dos);

				// Integer

				writeInteger(this.Flight_Number_Marketing_Airline, dos);

				// String

				writeString(this.Originally_Scheduled_Code_Share_Airline, dos);

				// Integer

				writeInteger(this.DOT_ID_Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this.Operating_Airline, dos);

				// Integer

				writeInteger(this.DOT_ID_Operating_Airline, dos);

				// String

				writeString(this.IATA_Code_Operating_Airline, dos);

				// String

				writeString(this.Tail_Number, dos);

				// Integer

				writeInteger(this.Flight_Number_Operating_Airline, dos);

				// Integer

				writeInteger(this.OriginAirportID, dos);

				// Integer

				writeInteger(this.OriginAirportSeqID, dos);

				// Integer

				writeInteger(this.OriginCityMarketID, dos);

				// String

				writeString(this.Origin, dos);

				// String

				writeString(this.OriginCityName, dos);

				// String

				writeString(this.OriginState, dos);

				// Integer

				writeInteger(this.OriginStateFips, dos);

				// String

				writeString(this.OriginStateName, dos);

				// Integer

				writeInteger(this.OriginWac, dos);

				// Integer

				writeInteger(this.DestAirportID, dos);

				// Integer

				writeInteger(this.DestAirportSeqID, dos);

				// Integer

				writeInteger(this.DestCityMarketID, dos);

				// String

				writeString(this.Dest, dos);

				// String

				writeString(this.DestCityName, dos);

				// String

				writeString(this.DestState, dos);

				// Integer

				writeInteger(this.DestStateFips, dos);

				// String

				writeString(this.DestStateName, dos);

				// Integer

				writeInteger(this.DestWac, dos);

				// Integer

				writeInteger(this.CRSDepTime, dos);

				// Integer

				writeInteger(this.DepTime, dos);

				// Integer

				writeInteger(this.DepDelay, dos);

				// Integer

				writeInteger(this.DepDelayMinutes, dos);

				// Integer

				writeInteger(this.DepDel15, dos);

				// Integer

				writeInteger(this.DepartureDelayGroups, dos);

				// String

				writeString(this.DepTimeBlk, dos);

				// Integer

				writeInteger(this.TaxiOut, dos);

				// Integer

				writeInteger(this.WheelsOff, dos);

				// Integer

				writeInteger(this.WheelsOn, dos);

				// Integer

				writeInteger(this.TaxiIn, dos);

				// Integer

				writeInteger(this.CRSArrTime, dos);

				// Integer

				writeInteger(this.ArrTime, dos);

				// Integer

				writeInteger(this.ArrDelay, dos);

				// Integer

				writeInteger(this.ArrDelayMinutes, dos);

				// Integer

				writeInteger(this.ArrDel15, dos);

				// Integer

				writeInteger(this.ArrivalDelayGroups, dos);

				// String

				writeString(this.ArrTimeBlk, dos);

				// Integer

				writeInteger(this.Cancelled, dos);

				// String

				writeString(this.CancellationCode, dos);

				// Integer

				writeInteger(this.Diverted, dos);

				// Integer

				writeInteger(this.CRSElapsedTime, dos);

				// Integer

				writeInteger(this.ActualElapsedTime, dos);

				// Integer

				writeInteger(this.AirTime, dos);

				// Integer

				writeInteger(this.Flights, dos);

				// Integer

				writeInteger(this.Distance, dos);

				// Integer

				writeInteger(this.DistanceGroup, dos);

				// Integer

				writeInteger(this.CarrierDelay, dos);

				// Integer

				writeInteger(this.WeatherDelay, dos);

				// Integer

				writeInteger(this.NASDelay, dos);

				// Integer

				writeInteger(this.SecurityDelay, dos);

				// Integer

				writeInteger(this.LateAircraftDelay, dos);

				// Integer

				writeInteger(this.FirstDepTime, dos);

				// Integer

				writeInteger(this.TotalAddGTime, dos);

				// Integer

				writeInteger(this.LongestAddGTime, dos);

				// Integer

				writeInteger(this.DivAirportLandings, dos);

				// String

				writeString(this.DivReachedDest, dos);

				// String

				writeString(this.DivActualElapsedTime, dos);

				// String

				writeString(this.DivArrDelay, dos);

				// String

				writeString(this.DivDistance, dos);

				// String

				writeString(this.Div1Airport, dos);

				// String

				writeString(this.Div1AirportID, dos);

				// String

				writeString(this.Div1AirportSeqID, dos);

				// String

				writeString(this.Div1WheelsOn, dos);

				// String

				writeString(this.Div1TotalGTime, dos);

				// String

				writeString(this.Div1LongestGTime, dos);

				// String

				writeString(this.Div1WheelsOff, dos);

				// String

				writeString(this.Div1TailNum, dos);

				// String

				writeString(this.Div2Airport, dos);

				// String

				writeString(this.Div2AirportID, dos);

				// String

				writeString(this.Div2AirportSeqID, dos);

				// String

				writeString(this.Div2WheelsOn, dos);

				// String

				writeString(this.Div2TotalGTime, dos);

				// String

				writeString(this.Div2LongestGTime, dos);

				// String

				writeString(this.Div2WheelsOff, dos);

				// String

				writeString(this.Div2TailNum, dos);

				// String

				writeString(this.Div3Airport, dos);

				// String

				writeString(this.Div3AirportID, dos);

				// String

				writeString(this.Div3AirportSeqID, dos);

				// String

				writeString(this.Div3WheelsOn, dos);

				// String

				writeString(this.Div3TotalGTime, dos);

				// String

				writeString(this.Div3LongestGTime, dos);

				// String

				writeString(this.Div3WheelsOff, dos);

				// String

				writeString(this.Div3TailNum, dos);

				// String

				writeString(this.Div4Airport, dos);

				// String

				writeString(this.Div4AirportID, dos);

				// String

				writeString(this.Div4AirportSeqID, dos);

				// String

				writeString(this.Div4WheelsOn, dos);

				// String

				writeString(this.Div4TotalGTime, dos);

				// String

				writeString(this.Div4LongestGTime, dos);

				// String

				writeString(this.Div4WheelsOff, dos);

				// String

				writeString(this.Div4TailNum, dos);

				// String

				writeString(this.Div5Airport, dos);

				// String

				writeString(this.Div5AirportID, dos);

				// String

				writeString(this.Div5AirportSeqID, dos);

				// String

				writeString(this.Div5WheelsOn, dos);

				// String

				writeString(this.Div5TotalGTime, dos);

				// String

				writeString(this.Div5LongestGTime, dos);

				// String

				writeString(this.Div5WheelsOff, dos);

				// String

				writeString(this.Div5TailNum, dos);

				// String

				writeString(this.Duplicate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Year=" + String.valueOf(Year));
			sb.append(",Quarter=" + String.valueOf(Quarter));
			sb.append(",Month=" + String.valueOf(Month));
			sb.append(",DayofMonth=" + String.valueOf(DayofMonth));
			sb.append(",DayOfWeek=" + String.valueOf(DayOfWeek));
			sb.append(",FlightDate=" + String.valueOf(FlightDate));
			sb.append(",Marketing_Airline_Network=" + Marketing_Airline_Network);
			sb.append(",Operated_or_Branded_Code_Share_Partners=" + Operated_or_Branded_Code_Share_Partners);
			sb.append(",DOT_ID_Marketing_Airline=" + String.valueOf(DOT_ID_Marketing_Airline));
			sb.append(",IATA_Code_Marketing_Airline=" + IATA_Code_Marketing_Airline);
			sb.append(",Flight_Number_Marketing_Airline=" + String.valueOf(Flight_Number_Marketing_Airline));
			sb.append(",Originally_Scheduled_Code_Share_Airline=" + Originally_Scheduled_Code_Share_Airline);
			sb.append(",DOT_ID_Originally_Scheduled_Code_Share_Airline="
					+ String.valueOf(DOT_ID_Originally_Scheduled_Code_Share_Airline));
			sb.append(",IATA_Code_Originally_Scheduled_Code_Share_Airline="
					+ IATA_Code_Originally_Scheduled_Code_Share_Airline);
			sb.append(",Flight_Num_Originally_Scheduled_Code_Share_Airline="
					+ Flight_Num_Originally_Scheduled_Code_Share_Airline);
			sb.append(",Operating_Airline=" + Operating_Airline);
			sb.append(",DOT_ID_Operating_Airline=" + String.valueOf(DOT_ID_Operating_Airline));
			sb.append(",IATA_Code_Operating_Airline=" + IATA_Code_Operating_Airline);
			sb.append(",Tail_Number=" + Tail_Number);
			sb.append(",Flight_Number_Operating_Airline=" + String.valueOf(Flight_Number_Operating_Airline));
			sb.append(",OriginAirportID=" + String.valueOf(OriginAirportID));
			sb.append(",OriginAirportSeqID=" + String.valueOf(OriginAirportSeqID));
			sb.append(",OriginCityMarketID=" + String.valueOf(OriginCityMarketID));
			sb.append(",Origin=" + Origin);
			sb.append(",OriginCityName=" + OriginCityName);
			sb.append(",OriginState=" + OriginState);
			sb.append(",OriginStateFips=" + String.valueOf(OriginStateFips));
			sb.append(",OriginStateName=" + OriginStateName);
			sb.append(",OriginWac=" + String.valueOf(OriginWac));
			sb.append(",DestAirportID=" + String.valueOf(DestAirportID));
			sb.append(",DestAirportSeqID=" + String.valueOf(DestAirportSeqID));
			sb.append(",DestCityMarketID=" + String.valueOf(DestCityMarketID));
			sb.append(",Dest=" + Dest);
			sb.append(",DestCityName=" + DestCityName);
			sb.append(",DestState=" + DestState);
			sb.append(",DestStateFips=" + String.valueOf(DestStateFips));
			sb.append(",DestStateName=" + DestStateName);
			sb.append(",DestWac=" + String.valueOf(DestWac));
			sb.append(",CRSDepTime=" + String.valueOf(CRSDepTime));
			sb.append(",DepTime=" + String.valueOf(DepTime));
			sb.append(",DepDelay=" + String.valueOf(DepDelay));
			sb.append(",DepDelayMinutes=" + String.valueOf(DepDelayMinutes));
			sb.append(",DepDel15=" + String.valueOf(DepDel15));
			sb.append(",DepartureDelayGroups=" + String.valueOf(DepartureDelayGroups));
			sb.append(",DepTimeBlk=" + DepTimeBlk);
			sb.append(",TaxiOut=" + String.valueOf(TaxiOut));
			sb.append(",WheelsOff=" + String.valueOf(WheelsOff));
			sb.append(",WheelsOn=" + String.valueOf(WheelsOn));
			sb.append(",TaxiIn=" + String.valueOf(TaxiIn));
			sb.append(",CRSArrTime=" + String.valueOf(CRSArrTime));
			sb.append(",ArrTime=" + String.valueOf(ArrTime));
			sb.append(",ArrDelay=" + String.valueOf(ArrDelay));
			sb.append(",ArrDelayMinutes=" + String.valueOf(ArrDelayMinutes));
			sb.append(",ArrDel15=" + String.valueOf(ArrDel15));
			sb.append(",ArrivalDelayGroups=" + String.valueOf(ArrivalDelayGroups));
			sb.append(",ArrTimeBlk=" + ArrTimeBlk);
			sb.append(",Cancelled=" + String.valueOf(Cancelled));
			sb.append(",CancellationCode=" + CancellationCode);
			sb.append(",Diverted=" + String.valueOf(Diverted));
			sb.append(",CRSElapsedTime=" + String.valueOf(CRSElapsedTime));
			sb.append(",ActualElapsedTime=" + String.valueOf(ActualElapsedTime));
			sb.append(",AirTime=" + String.valueOf(AirTime));
			sb.append(",Flights=" + String.valueOf(Flights));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",DistanceGroup=" + String.valueOf(DistanceGroup));
			sb.append(",CarrierDelay=" + String.valueOf(CarrierDelay));
			sb.append(",WeatherDelay=" + String.valueOf(WeatherDelay));
			sb.append(",NASDelay=" + String.valueOf(NASDelay));
			sb.append(",SecurityDelay=" + String.valueOf(SecurityDelay));
			sb.append(",LateAircraftDelay=" + String.valueOf(LateAircraftDelay));
			sb.append(",FirstDepTime=" + String.valueOf(FirstDepTime));
			sb.append(",TotalAddGTime=" + String.valueOf(TotalAddGTime));
			sb.append(",LongestAddGTime=" + String.valueOf(LongestAddGTime));
			sb.append(",DivAirportLandings=" + String.valueOf(DivAirportLandings));
			sb.append(",DivReachedDest=" + DivReachedDest);
			sb.append(",DivActualElapsedTime=" + DivActualElapsedTime);
			sb.append(",DivArrDelay=" + DivArrDelay);
			sb.append(",DivDistance=" + DivDistance);
			sb.append(",Div1Airport=" + Div1Airport);
			sb.append(",Div1AirportID=" + Div1AirportID);
			sb.append(",Div1AirportSeqID=" + Div1AirportSeqID);
			sb.append(",Div1WheelsOn=" + Div1WheelsOn);
			sb.append(",Div1TotalGTime=" + Div1TotalGTime);
			sb.append(",Div1LongestGTime=" + Div1LongestGTime);
			sb.append(",Div1WheelsOff=" + Div1WheelsOff);
			sb.append(",Div1TailNum=" + Div1TailNum);
			sb.append(",Div2Airport=" + Div2Airport);
			sb.append(",Div2AirportID=" + Div2AirportID);
			sb.append(",Div2AirportSeqID=" + Div2AirportSeqID);
			sb.append(",Div2WheelsOn=" + Div2WheelsOn);
			sb.append(",Div2TotalGTime=" + Div2TotalGTime);
			sb.append(",Div2LongestGTime=" + Div2LongestGTime);
			sb.append(",Div2WheelsOff=" + Div2WheelsOff);
			sb.append(",Div2TailNum=" + Div2TailNum);
			sb.append(",Div3Airport=" + Div3Airport);
			sb.append(",Div3AirportID=" + Div3AirportID);
			sb.append(",Div3AirportSeqID=" + Div3AirportSeqID);
			sb.append(",Div3WheelsOn=" + Div3WheelsOn);
			sb.append(",Div3TotalGTime=" + Div3TotalGTime);
			sb.append(",Div3LongestGTime=" + Div3LongestGTime);
			sb.append(",Div3WheelsOff=" + Div3WheelsOff);
			sb.append(",Div3TailNum=" + Div3TailNum);
			sb.append(",Div4Airport=" + Div4Airport);
			sb.append(",Div4AirportID=" + Div4AirportID);
			sb.append(",Div4AirportSeqID=" + Div4AirportSeqID);
			sb.append(",Div4WheelsOn=" + Div4WheelsOn);
			sb.append(",Div4TotalGTime=" + Div4TotalGTime);
			sb.append(",Div4LongestGTime=" + Div4LongestGTime);
			sb.append(",Div4WheelsOff=" + Div4WheelsOff);
			sb.append(",Div4TailNum=" + Div4TailNum);
			sb.append(",Div5Airport=" + Div5Airport);
			sb.append(",Div5AirportID=" + Div5AirportID);
			sb.append(",Div5AirportSeqID=" + Div5AirportSeqID);
			sb.append(",Div5WheelsOn=" + Div5WheelsOn);
			sb.append(",Div5TotalGTime=" + Div5TotalGTime);
			sb.append(",Div5LongestGTime=" + Div5LongestGTime);
			sb.append(",Div5WheelsOff=" + Div5WheelsOff);
			sb.append(",Div5TailNum=" + Div5TailNum);
			sb.append(",Duplicate=" + Duplicate);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_2Process(globalMap);
				tDBInput_3Process(globalMap);

				row1Struct row1 = new row1Struct();
				obtenerJoinsStruct obtenerJoins = new obtenerJoinsStruct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "obtenerJoins");
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_1 = "facvuelos";
				String schemaForSearch_tDBOutput_1 = null;
				String tableForSearch_tDBOutput_1 = tableName_tDBOutput_1;
				if (dbschema_tDBOutput_1 != null && dbschema_tDBOutput_1.trim().length() > 0) {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + tableName_tDBOutput_1;
				}

				schemaForSearch_tDBOutput_1 = dbschema_tDBOutput_1;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				long date_tDBOutput_1;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				conn_tDBOutput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				class Util_tDBOutput_1 {

					int correctNumPerInsert(String source, int numPerInsert) {
						if (source == null) {
							return numPerInsert;
						}

						int columnCountEveryRow = 0;

						for (int i = 0; i < source.length(); i++) {
							if ('?' == source.charAt(i)) {
								columnCountEveryRow++;
							}
						}

						if (columnCountEveryRow == 0) {
							return numPerInsert;
						}

						int maxNumForParameterSize = 32767;
						int maxNumPerInsert = maxNumForParameterSize / columnCountEveryRow;

						if (numPerInsert > maxNumPerInsert) {
							return maxNumPerInsert;
						}

						return numPerInsert;
					}

				}

				final Util_tDBOutput_1 util_tDBOutput_1 = new Util_tDBOutput_1();
				int numPerInsert_tDBOutput_1 = 100;
				int count_tDBOutput_1 = 0;

				int rsTruncCountNumber_tDBOutput_1 = 0;
				try (java.sql.Statement stmtTruncCount_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					try (java.sql.ResultSet rsTruncCount_tDBOutput_1 = stmtTruncCount_tDBOutput_1.executeQuery(
							"--Talend -v 8.0 \n SELECT COUNT(1) FROM \"" + tableName_tDBOutput_1 + "\"")) {
						if (rsTruncCount_tDBOutput_1.next()) {
							rsTruncCountNumber_tDBOutput_1 = rsTruncCount_tDBOutput_1.getInt(1);
						}
					}
				}
				try (java.sql.Statement stmtTrunc_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtTrunc_tDBOutput_1
							.executeUpdate("--Talend -v 8.0 \n TRUNCATE TABLE \"" + tableName_tDBOutput_1 + "\"");
					deletedCount_tDBOutput_1 += rsTruncCountNumber_tDBOutput_1;
				}
				int rowCounttDBOutput_1 = 0;
				class BufferLine_tDBOutput_1 {
					Integer aerolineakey;

					public BufferLine_tDBOutput_1 c0(Integer aerolineakey) {
						this.aerolineakey = aerolineakey;
						return this;
					}

					Integer fechakey;

					public BufferLine_tDBOutput_1 c1(Integer fechakey) {
						this.fechakey = fechakey;
						return this;
					}

					Integer flight;

					public BufferLine_tDBOutput_1 c2(Integer flight) {
						this.flight = flight;
						return this;
					}

					Integer cancelledflight;

					public BufferLine_tDBOutput_1 c3(Integer cancelledflight) {
						this.cancelledflight = cancelledflight;
						return this;
					}

					String cancellationcode;

					public BufferLine_tDBOutput_1 c4(String cancellationcode) {
						this.cancellationcode = cancellationcode;
						return this;
					}

					Integer divertedflight;

					public BufferLine_tDBOutput_1 c5(Integer divertedflight) {
						this.divertedflight = divertedflight;
						return this;
					}

					Integer depdel15;

					public BufferLine_tDBOutput_1 c6(Integer depdel15) {
						this.depdel15 = depdel15;
						return this;
					}

					Integer arrdel15;

					public BufferLine_tDBOutput_1 c7(Integer arrdel15) {
						this.arrdel15 = arrdel15;
						return this;
					}

					Integer depdelayminutes;

					public BufferLine_tDBOutput_1 c8(Integer depdelayminutes) {
						this.depdelayminutes = depdelayminutes;
						return this;
					}

					Integer arrdelayminutes;

					public BufferLine_tDBOutput_1 c9(Integer arrdelayminutes) {
						this.arrdelayminutes = arrdelayminutes;
						return this;
					}

					Integer carrierdelay;

					public BufferLine_tDBOutput_1 c10(Integer carrierdelay) {
						this.carrierdelay = carrierdelay;
						return this;
					}

					Integer weatherdelay;

					public BufferLine_tDBOutput_1 c11(Integer weatherdelay) {
						this.weatherdelay = weatherdelay;
						return this;
					}

					Integer nasdelay;

					public BufferLine_tDBOutput_1 c12(Integer nasdelay) {
						this.nasdelay = nasdelay;
						return this;
					}

					Integer securitydelay;

					public BufferLine_tDBOutput_1 c13(Integer securitydelay) {
						this.securitydelay = securitydelay;
						return this;
					}

					Integer lateaircraftdelay;

					public BufferLine_tDBOutput_1 c14(Integer lateaircraftdelay) {
						this.lateaircraftdelay = lateaircraftdelay;
						return this;
					}
				}

				java.util.List<BufferLine_tDBOutput_1> exInsertColValueListtDBOutput_1 = new java.util.ArrayList();
				BufferLine_tDBOutput_1 exInsertColValuetDBOutput_1 = null;

				String valueList_tDBOutput_1 = "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				numPerInsert_tDBOutput_1 = util_tDBOutput_1.correctNumPerInsert(valueList_tDBOutput_1,
						numPerInsert_tDBOutput_1);

				StringBuilder extendInsertValueStmt_tDBOutput_1 = new StringBuilder();
				for (int i_tDBOutput_1 = 0; i_tDBOutput_1 < numPerInsert_tDBOutput_1; i_tDBOutput_1++) {
					extendInsertValueStmt_tDBOutput_1.append(valueList_tDBOutput_1);
					if (i_tDBOutput_1 != numPerInsert_tDBOutput_1 - 1)
						extendInsertValueStmt_tDBOutput_1.append(",");
				}

				String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1
						+ "\" (\"aerolineakey\",\"fechakey\",\"flight\",\"cancelledflight\",\"cancellationcode\",\"divertedflight\",\"depdel15\",\"arrdel15\",\"depdelayminutes\",\"arrdelayminutes\",\"carrierdelay\",\"weatherdelay\",\"nasdelay\",\"securitydelay\",\"lateaircraftdelay\") VALUES "
						+ extendInsertValueStmt_tDBOutput_1.toString();
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement("--Talend -v 8.0 \n " + insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) globalMap
						.get("tHash_Lookup_row3"));

				row3Struct row3HashKey = new row3Struct();
				row3Struct row3Default = new row3Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				obtenerJoinsStruct obtenerJoins_tmp = new obtenerJoinsStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
				calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "select * from vuelos2";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.Year = null;
						} else {

							row1.Year = rs_tDBInput_1.getInt(1);
							if (rs_tDBInput_1.wasNull()) {
								row1.Year = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.Quarter = null;
						} else {

							row1.Quarter = rs_tDBInput_1.getInt(2);
							if (rs_tDBInput_1.wasNull()) {
								row1.Quarter = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.Month = null;
						} else {

							row1.Month = rs_tDBInput_1.getInt(3);
							if (rs_tDBInput_1.wasNull()) {
								row1.Month = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.DayofMonth = null;
						} else {

							row1.DayofMonth = rs_tDBInput_1.getInt(4);
							if (rs_tDBInput_1.wasNull()) {
								row1.DayofMonth = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.DayOfWeek = null;
						} else {

							row1.DayOfWeek = rs_tDBInput_1.getInt(5);
							if (rs_tDBInput_1.wasNull()) {
								row1.DayOfWeek = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.FlightDate = null;
						} else {

							if (rs_tDBInput_1.getString(6) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(6);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.FlightDate = rs_tDBInput_1.getTimestamp(6);
								} else {
									row1.FlightDate = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.FlightDate = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.Marketing_Airline_Network = null;
						} else {

							row1.Marketing_Airline_Network = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7,
									false);
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.Operated_or_Branded_Code_Share_Partners = null;
						} else {

							row1.Operated_or_Branded_Code_Share_Partners = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 8, false);
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.DOT_ID_Marketing_Airline = null;
						} else {

							row1.DOT_ID_Marketing_Airline = rs_tDBInput_1.getInt(9);
							if (rs_tDBInput_1.wasNull()) {
								row1.DOT_ID_Marketing_Airline = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.IATA_Code_Marketing_Airline = null;
						} else {

							row1.IATA_Code_Marketing_Airline = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10,
									false);
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.Flight_Number_Marketing_Airline = null;
						} else {

							row1.Flight_Number_Marketing_Airline = rs_tDBInput_1.getInt(11);
							if (rs_tDBInput_1.wasNull()) {
								row1.Flight_Number_Marketing_Airline = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.Originally_Scheduled_Code_Share_Airline = null;
						} else {

							row1.Originally_Scheduled_Code_Share_Airline = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 12, false);
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.DOT_ID_Originally_Scheduled_Code_Share_Airline = null;
						} else {

							row1.DOT_ID_Originally_Scheduled_Code_Share_Airline = rs_tDBInput_1.getInt(13);
							if (rs_tDBInput_1.wasNull()) {
								row1.DOT_ID_Originally_Scheduled_Code_Share_Airline = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.IATA_Code_Originally_Scheduled_Code_Share_Airline = null;
						} else {

							row1.IATA_Code_Originally_Scheduled_Code_Share_Airline = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 14, false);
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row1.Flight_Num_Originally_Scheduled_Code_Share_Airline = null;
						} else {

							row1.Flight_Num_Originally_Scheduled_Code_Share_Airline = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 15, false);
						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row1.Operating_Airline = null;
						} else {

							row1.Operating_Airline = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, false);
						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row1.DOT_ID_Operating_Airline = null;
						} else {

							row1.DOT_ID_Operating_Airline = rs_tDBInput_1.getInt(17);
							if (rs_tDBInput_1.wasNull()) {
								row1.DOT_ID_Operating_Airline = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 18) {
							row1.IATA_Code_Operating_Airline = null;
						} else {

							row1.IATA_Code_Operating_Airline = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18,
									false);
						}
						if (colQtyInRs_tDBInput_1 < 19) {
							row1.Tail_Number = null;
						} else {

							row1.Tail_Number = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, false);
						}
						if (colQtyInRs_tDBInput_1 < 20) {
							row1.Flight_Number_Operating_Airline = null;
						} else {

							row1.Flight_Number_Operating_Airline = rs_tDBInput_1.getInt(20);
							if (rs_tDBInput_1.wasNull()) {
								row1.Flight_Number_Operating_Airline = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 21) {
							row1.OriginAirportID = null;
						} else {

							row1.OriginAirportID = rs_tDBInput_1.getInt(21);
							if (rs_tDBInput_1.wasNull()) {
								row1.OriginAirportID = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 22) {
							row1.OriginAirportSeqID = null;
						} else {

							row1.OriginAirportSeqID = rs_tDBInput_1.getInt(22);
							if (rs_tDBInput_1.wasNull()) {
								row1.OriginAirportSeqID = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 23) {
							row1.OriginCityMarketID = null;
						} else {

							row1.OriginCityMarketID = rs_tDBInput_1.getInt(23);
							if (rs_tDBInput_1.wasNull()) {
								row1.OriginCityMarketID = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 24) {
							row1.Origin = null;
						} else {

							row1.Origin = routines.system.JDBCUtil.getString(rs_tDBInput_1, 24, false);
						}
						if (colQtyInRs_tDBInput_1 < 25) {
							row1.OriginCityName = null;
						} else {

							row1.OriginCityName = routines.system.JDBCUtil.getString(rs_tDBInput_1, 25, false);
						}
						if (colQtyInRs_tDBInput_1 < 26) {
							row1.OriginState = null;
						} else {

							row1.OriginState = routines.system.JDBCUtil.getString(rs_tDBInput_1, 26, false);
						}
						if (colQtyInRs_tDBInput_1 < 27) {
							row1.OriginStateFips = null;
						} else {

							row1.OriginStateFips = rs_tDBInput_1.getInt(27);
							if (rs_tDBInput_1.wasNull()) {
								row1.OriginStateFips = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 28) {
							row1.OriginStateName = null;
						} else {

							row1.OriginStateName = routines.system.JDBCUtil.getString(rs_tDBInput_1, 28, false);
						}
						if (colQtyInRs_tDBInput_1 < 29) {
							row1.OriginWac = null;
						} else {

							row1.OriginWac = rs_tDBInput_1.getInt(29);
							if (rs_tDBInput_1.wasNull()) {
								row1.OriginWac = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 30) {
							row1.DestAirportID = null;
						} else {

							row1.DestAirportID = rs_tDBInput_1.getInt(30);
							if (rs_tDBInput_1.wasNull()) {
								row1.DestAirportID = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 31) {
							row1.DestAirportSeqID = null;
						} else {

							row1.DestAirportSeqID = rs_tDBInput_1.getInt(31);
							if (rs_tDBInput_1.wasNull()) {
								row1.DestAirportSeqID = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 32) {
							row1.DestCityMarketID = null;
						} else {

							row1.DestCityMarketID = rs_tDBInput_1.getInt(32);
							if (rs_tDBInput_1.wasNull()) {
								row1.DestCityMarketID = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 33) {
							row1.Dest = null;
						} else {

							row1.Dest = routines.system.JDBCUtil.getString(rs_tDBInput_1, 33, false);
						}
						if (colQtyInRs_tDBInput_1 < 34) {
							row1.DestCityName = null;
						} else {

							row1.DestCityName = routines.system.JDBCUtil.getString(rs_tDBInput_1, 34, false);
						}
						if (colQtyInRs_tDBInput_1 < 35) {
							row1.DestState = null;
						} else {

							row1.DestState = routines.system.JDBCUtil.getString(rs_tDBInput_1, 35, false);
						}
						if (colQtyInRs_tDBInput_1 < 36) {
							row1.DestStateFips = null;
						} else {

							row1.DestStateFips = rs_tDBInput_1.getInt(36);
							if (rs_tDBInput_1.wasNull()) {
								row1.DestStateFips = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 37) {
							row1.DestStateName = null;
						} else {

							row1.DestStateName = routines.system.JDBCUtil.getString(rs_tDBInput_1, 37, false);
						}
						if (colQtyInRs_tDBInput_1 < 38) {
							row1.DestWac = null;
						} else {

							row1.DestWac = rs_tDBInput_1.getInt(38);
							if (rs_tDBInput_1.wasNull()) {
								row1.DestWac = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 39) {
							row1.CRSDepTime = null;
						} else {

							row1.CRSDepTime = rs_tDBInput_1.getInt(39);
							if (rs_tDBInput_1.wasNull()) {
								row1.CRSDepTime = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 40) {
							row1.DepTime = null;
						} else {

							row1.DepTime = rs_tDBInput_1.getInt(40);
							if (rs_tDBInput_1.wasNull()) {
								row1.DepTime = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 41) {
							row1.DepDelay = null;
						} else {

							row1.DepDelay = rs_tDBInput_1.getInt(41);
							if (rs_tDBInput_1.wasNull()) {
								row1.DepDelay = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 42) {
							row1.DepDelayMinutes = null;
						} else {

							row1.DepDelayMinutes = rs_tDBInput_1.getInt(42);
							if (rs_tDBInput_1.wasNull()) {
								row1.DepDelayMinutes = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 43) {
							row1.DepDel15 = null;
						} else {

							row1.DepDel15 = rs_tDBInput_1.getInt(43);
							if (rs_tDBInput_1.wasNull()) {
								row1.DepDel15 = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 44) {
							row1.DepartureDelayGroups = null;
						} else {

							row1.DepartureDelayGroups = rs_tDBInput_1.getInt(44);
							if (rs_tDBInput_1.wasNull()) {
								row1.DepartureDelayGroups = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 45) {
							row1.DepTimeBlk = null;
						} else {

							row1.DepTimeBlk = routines.system.JDBCUtil.getString(rs_tDBInput_1, 45, false);
						}
						if (colQtyInRs_tDBInput_1 < 46) {
							row1.TaxiOut = null;
						} else {

							row1.TaxiOut = rs_tDBInput_1.getInt(46);
							if (rs_tDBInput_1.wasNull()) {
								row1.TaxiOut = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 47) {
							row1.WheelsOff = null;
						} else {

							row1.WheelsOff = rs_tDBInput_1.getInt(47);
							if (rs_tDBInput_1.wasNull()) {
								row1.WheelsOff = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 48) {
							row1.WheelsOn = null;
						} else {

							row1.WheelsOn = rs_tDBInput_1.getInt(48);
							if (rs_tDBInput_1.wasNull()) {
								row1.WheelsOn = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 49) {
							row1.TaxiIn = null;
						} else {

							row1.TaxiIn = rs_tDBInput_1.getInt(49);
							if (rs_tDBInput_1.wasNull()) {
								row1.TaxiIn = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 50) {
							row1.CRSArrTime = null;
						} else {

							row1.CRSArrTime = rs_tDBInput_1.getInt(50);
							if (rs_tDBInput_1.wasNull()) {
								row1.CRSArrTime = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 51) {
							row1.ArrTime = null;
						} else {

							row1.ArrTime = rs_tDBInput_1.getInt(51);
							if (rs_tDBInput_1.wasNull()) {
								row1.ArrTime = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 52) {
							row1.ArrDelay = null;
						} else {

							row1.ArrDelay = rs_tDBInput_1.getInt(52);
							if (rs_tDBInput_1.wasNull()) {
								row1.ArrDelay = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 53) {
							row1.ArrDelayMinutes = null;
						} else {

							row1.ArrDelayMinutes = rs_tDBInput_1.getInt(53);
							if (rs_tDBInput_1.wasNull()) {
								row1.ArrDelayMinutes = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 54) {
							row1.ArrDel15 = null;
						} else {

							row1.ArrDel15 = rs_tDBInput_1.getInt(54);
							if (rs_tDBInput_1.wasNull()) {
								row1.ArrDel15 = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 55) {
							row1.ArrivalDelayGroups = null;
						} else {

							row1.ArrivalDelayGroups = rs_tDBInput_1.getInt(55);
							if (rs_tDBInput_1.wasNull()) {
								row1.ArrivalDelayGroups = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 56) {
							row1.ArrTimeBlk = null;
						} else {

							row1.ArrTimeBlk = routines.system.JDBCUtil.getString(rs_tDBInput_1, 56, false);
						}
						if (colQtyInRs_tDBInput_1 < 57) {
							row1.Cancelled = null;
						} else {

							row1.Cancelled = rs_tDBInput_1.getInt(57);
							if (rs_tDBInput_1.wasNull()) {
								row1.Cancelled = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 58) {
							row1.CancellationCode = null;
						} else {

							row1.CancellationCode = routines.system.JDBCUtil.getString(rs_tDBInput_1, 58, false);
						}
						if (colQtyInRs_tDBInput_1 < 59) {
							row1.Diverted = null;
						} else {

							row1.Diverted = rs_tDBInput_1.getInt(59);
							if (rs_tDBInput_1.wasNull()) {
								row1.Diverted = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 60) {
							row1.CRSElapsedTime = null;
						} else {

							row1.CRSElapsedTime = rs_tDBInput_1.getInt(60);
							if (rs_tDBInput_1.wasNull()) {
								row1.CRSElapsedTime = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 61) {
							row1.ActualElapsedTime = null;
						} else {

							row1.ActualElapsedTime = rs_tDBInput_1.getInt(61);
							if (rs_tDBInput_1.wasNull()) {
								row1.ActualElapsedTime = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 62) {
							row1.AirTime = null;
						} else {

							row1.AirTime = rs_tDBInput_1.getInt(62);
							if (rs_tDBInput_1.wasNull()) {
								row1.AirTime = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 63) {
							row1.Flights = null;
						} else {

							row1.Flights = rs_tDBInput_1.getInt(63);
							if (rs_tDBInput_1.wasNull()) {
								row1.Flights = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 64) {
							row1.Distance = null;
						} else {

							row1.Distance = rs_tDBInput_1.getInt(64);
							if (rs_tDBInput_1.wasNull()) {
								row1.Distance = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 65) {
							row1.DistanceGroup = null;
						} else {

							row1.DistanceGroup = rs_tDBInput_1.getInt(65);
							if (rs_tDBInput_1.wasNull()) {
								row1.DistanceGroup = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 66) {
							row1.CarrierDelay = null;
						} else {

							row1.CarrierDelay = rs_tDBInput_1.getInt(66);
							if (rs_tDBInput_1.wasNull()) {
								row1.CarrierDelay = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 67) {
							row1.WeatherDelay = null;
						} else {

							row1.WeatherDelay = rs_tDBInput_1.getInt(67);
							if (rs_tDBInput_1.wasNull()) {
								row1.WeatherDelay = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 68) {
							row1.NASDelay = null;
						} else {

							row1.NASDelay = rs_tDBInput_1.getInt(68);
							if (rs_tDBInput_1.wasNull()) {
								row1.NASDelay = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 69) {
							row1.SecurityDelay = null;
						} else {

							row1.SecurityDelay = rs_tDBInput_1.getInt(69);
							if (rs_tDBInput_1.wasNull()) {
								row1.SecurityDelay = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 70) {
							row1.LateAircraftDelay = null;
						} else {

							row1.LateAircraftDelay = rs_tDBInput_1.getInt(70);
							if (rs_tDBInput_1.wasNull()) {
								row1.LateAircraftDelay = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 71) {
							row1.FirstDepTime = null;
						} else {

							row1.FirstDepTime = rs_tDBInput_1.getInt(71);
							if (rs_tDBInput_1.wasNull()) {
								row1.FirstDepTime = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 72) {
							row1.TotalAddGTime = null;
						} else {

							row1.TotalAddGTime = rs_tDBInput_1.getInt(72);
							if (rs_tDBInput_1.wasNull()) {
								row1.TotalAddGTime = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 73) {
							row1.LongestAddGTime = null;
						} else {

							row1.LongestAddGTime = rs_tDBInput_1.getInt(73);
							if (rs_tDBInput_1.wasNull()) {
								row1.LongestAddGTime = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 74) {
							row1.DivAirportLandings = null;
						} else {

							row1.DivAirportLandings = rs_tDBInput_1.getInt(74);
							if (rs_tDBInput_1.wasNull()) {
								row1.DivAirportLandings = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 75) {
							row1.DivReachedDest = null;
						} else {

							row1.DivReachedDest = routines.system.JDBCUtil.getString(rs_tDBInput_1, 75, false);
						}
						if (colQtyInRs_tDBInput_1 < 76) {
							row1.DivActualElapsedTime = null;
						} else {

							row1.DivActualElapsedTime = routines.system.JDBCUtil.getString(rs_tDBInput_1, 76, false);
						}
						if (colQtyInRs_tDBInput_1 < 77) {
							row1.DivArrDelay = null;
						} else {

							row1.DivArrDelay = routines.system.JDBCUtil.getString(rs_tDBInput_1, 77, false);
						}
						if (colQtyInRs_tDBInput_1 < 78) {
							row1.DivDistance = null;
						} else {

							row1.DivDistance = routines.system.JDBCUtil.getString(rs_tDBInput_1, 78, false);
						}
						if (colQtyInRs_tDBInput_1 < 79) {
							row1.Div1Airport = null;
						} else {

							row1.Div1Airport = routines.system.JDBCUtil.getString(rs_tDBInput_1, 79, false);
						}
						if (colQtyInRs_tDBInput_1 < 80) {
							row1.Div1AirportID = null;
						} else {

							row1.Div1AirportID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 80, false);
						}
						if (colQtyInRs_tDBInput_1 < 81) {
							row1.Div1AirportSeqID = null;
						} else {

							row1.Div1AirportSeqID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 81, false);
						}
						if (colQtyInRs_tDBInput_1 < 82) {
							row1.Div1WheelsOn = null;
						} else {

							row1.Div1WheelsOn = routines.system.JDBCUtil.getString(rs_tDBInput_1, 82, false);
						}
						if (colQtyInRs_tDBInput_1 < 83) {
							row1.Div1TotalGTime = null;
						} else {

							row1.Div1TotalGTime = routines.system.JDBCUtil.getString(rs_tDBInput_1, 83, false);
						}
						if (colQtyInRs_tDBInput_1 < 84) {
							row1.Div1LongestGTime = null;
						} else {

							row1.Div1LongestGTime = routines.system.JDBCUtil.getString(rs_tDBInput_1, 84, false);
						}
						if (colQtyInRs_tDBInput_1 < 85) {
							row1.Div1WheelsOff = null;
						} else {

							row1.Div1WheelsOff = routines.system.JDBCUtil.getString(rs_tDBInput_1, 85, false);
						}
						if (colQtyInRs_tDBInput_1 < 86) {
							row1.Div1TailNum = null;
						} else {

							row1.Div1TailNum = routines.system.JDBCUtil.getString(rs_tDBInput_1, 86, false);
						}
						if (colQtyInRs_tDBInput_1 < 87) {
							row1.Div2Airport = null;
						} else {

							row1.Div2Airport = routines.system.JDBCUtil.getString(rs_tDBInput_1, 87, false);
						}
						if (colQtyInRs_tDBInput_1 < 88) {
							row1.Div2AirportID = null;
						} else {

							row1.Div2AirportID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 88, false);
						}
						if (colQtyInRs_tDBInput_1 < 89) {
							row1.Div2AirportSeqID = null;
						} else {

							row1.Div2AirportSeqID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 89, false);
						}
						if (colQtyInRs_tDBInput_1 < 90) {
							row1.Div2WheelsOn = null;
						} else {

							row1.Div2WheelsOn = routines.system.JDBCUtil.getString(rs_tDBInput_1, 90, false);
						}
						if (colQtyInRs_tDBInput_1 < 91) {
							row1.Div2TotalGTime = null;
						} else {

							row1.Div2TotalGTime = routines.system.JDBCUtil.getString(rs_tDBInput_1, 91, false);
						}
						if (colQtyInRs_tDBInput_1 < 92) {
							row1.Div2LongestGTime = null;
						} else {

							row1.Div2LongestGTime = routines.system.JDBCUtil.getString(rs_tDBInput_1, 92, false);
						}
						if (colQtyInRs_tDBInput_1 < 93) {
							row1.Div2WheelsOff = null;
						} else {

							row1.Div2WheelsOff = routines.system.JDBCUtil.getString(rs_tDBInput_1, 93, false);
						}
						if (colQtyInRs_tDBInput_1 < 94) {
							row1.Div2TailNum = null;
						} else {

							row1.Div2TailNum = routines.system.JDBCUtil.getString(rs_tDBInput_1, 94, false);
						}
						if (colQtyInRs_tDBInput_1 < 95) {
							row1.Div3Airport = null;
						} else {

							row1.Div3Airport = routines.system.JDBCUtil.getString(rs_tDBInput_1, 95, false);
						}
						if (colQtyInRs_tDBInput_1 < 96) {
							row1.Div3AirportID = null;
						} else {

							row1.Div3AirportID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 96, false);
						}
						if (colQtyInRs_tDBInput_1 < 97) {
							row1.Div3AirportSeqID = null;
						} else {

							row1.Div3AirportSeqID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 97, false);
						}
						if (colQtyInRs_tDBInput_1 < 98) {
							row1.Div3WheelsOn = null;
						} else {

							row1.Div3WheelsOn = routines.system.JDBCUtil.getString(rs_tDBInput_1, 98, false);
						}
						if (colQtyInRs_tDBInput_1 < 99) {
							row1.Div3TotalGTime = null;
						} else {

							row1.Div3TotalGTime = routines.system.JDBCUtil.getString(rs_tDBInput_1, 99, false);
						}
						if (colQtyInRs_tDBInput_1 < 100) {
							row1.Div3LongestGTime = null;
						} else {

							row1.Div3LongestGTime = routines.system.JDBCUtil.getString(rs_tDBInput_1, 100, false);
						}
						if (colQtyInRs_tDBInput_1 < 101) {
							row1.Div3WheelsOff = null;
						} else {

							row1.Div3WheelsOff = routines.system.JDBCUtil.getString(rs_tDBInput_1, 101, false);
						}
						if (colQtyInRs_tDBInput_1 < 102) {
							row1.Div3TailNum = null;
						} else {

							row1.Div3TailNum = routines.system.JDBCUtil.getString(rs_tDBInput_1, 102, false);
						}
						if (colQtyInRs_tDBInput_1 < 103) {
							row1.Div4Airport = null;
						} else {

							row1.Div4Airport = routines.system.JDBCUtil.getString(rs_tDBInput_1, 103, false);
						}
						if (colQtyInRs_tDBInput_1 < 104) {
							row1.Div4AirportID = null;
						} else {

							row1.Div4AirportID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 104, false);
						}
						if (colQtyInRs_tDBInput_1 < 105) {
							row1.Div4AirportSeqID = null;
						} else {

							row1.Div4AirportSeqID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 105, false);
						}
						if (colQtyInRs_tDBInput_1 < 106) {
							row1.Div4WheelsOn = null;
						} else {

							row1.Div4WheelsOn = routines.system.JDBCUtil.getString(rs_tDBInput_1, 106, false);
						}
						if (colQtyInRs_tDBInput_1 < 107) {
							row1.Div4TotalGTime = null;
						} else {

							row1.Div4TotalGTime = routines.system.JDBCUtil.getString(rs_tDBInput_1, 107, false);
						}
						if (colQtyInRs_tDBInput_1 < 108) {
							row1.Div4LongestGTime = null;
						} else {

							row1.Div4LongestGTime = routines.system.JDBCUtil.getString(rs_tDBInput_1, 108, false);
						}
						if (colQtyInRs_tDBInput_1 < 109) {
							row1.Div4WheelsOff = null;
						} else {

							row1.Div4WheelsOff = routines.system.JDBCUtil.getString(rs_tDBInput_1, 109, false);
						}
						if (colQtyInRs_tDBInput_1 < 110) {
							row1.Div4TailNum = null;
						} else {

							row1.Div4TailNum = routines.system.JDBCUtil.getString(rs_tDBInput_1, 110, false);
						}
						if (colQtyInRs_tDBInput_1 < 111) {
							row1.Div5Airport = null;
						} else {

							row1.Div5Airport = routines.system.JDBCUtil.getString(rs_tDBInput_1, 111, false);
						}
						if (colQtyInRs_tDBInput_1 < 112) {
							row1.Div5AirportID = null;
						} else {

							row1.Div5AirportID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 112, false);
						}
						if (colQtyInRs_tDBInput_1 < 113) {
							row1.Div5AirportSeqID = null;
						} else {

							row1.Div5AirportSeqID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 113, false);
						}
						if (colQtyInRs_tDBInput_1 < 114) {
							row1.Div5WheelsOn = null;
						} else {

							row1.Div5WheelsOn = routines.system.JDBCUtil.getString(rs_tDBInput_1, 114, false);
						}
						if (colQtyInRs_tDBInput_1 < 115) {
							row1.Div5TotalGTime = null;
						} else {

							row1.Div5TotalGTime = routines.system.JDBCUtil.getString(rs_tDBInput_1, 115, false);
						}
						if (colQtyInRs_tDBInput_1 < 116) {
							row1.Div5LongestGTime = null;
						} else {

							row1.Div5LongestGTime = routines.system.JDBCUtil.getString(rs_tDBInput_1, 116, false);
						}
						if (colQtyInRs_tDBInput_1 < 117) {
							row1.Div5WheelsOff = null;
						} else {

							row1.Div5WheelsOff = routines.system.JDBCUtil.getString(rs_tDBInput_1, 117, false);
						}
						if (colQtyInRs_tDBInput_1 < 118) {
							row1.Div5TailNum = null;
						} else {

							row1.Div5TailNum = routines.system.JDBCUtil.getString(rs_tDBInput_1, 118, false);
						}
						if (colQtyInRs_tDBInput_1 < 119) {
							row1.Duplicate = null;
						} else {

							row1.Duplicate = routines.system.JDBCUtil.getString(rs_tDBInput_1, 119, false);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row1"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row2"
						///////////////////////////////////////////////

						boolean forceLooprow2 = false;

						row2Struct row2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row2HashKey.codigo = row1.Operating_Airline;

							row2HashKey.hashCodeDirty = true;

							tHash_Lookup_row2.lookup(row2HashKey);

							if (!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_1 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						row2Struct row2 = null;

						row2Struct fromLookup_row2 = null;
						row2 = row2Default;

						if (tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) { // G 099

							fromLookup_row2 = tHash_Lookup_row2.next();

						} // G 099

						if (fromLookup_row2 != null) {
							row2 = fromLookup_row2;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row3"
						///////////////////////////////////////////////

						boolean forceLooprow3 = false;

						row3Struct row3ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row3HashKey.Date = row1.FlightDate == null ? null
									: new java.util.Date(row1.FlightDate.getTime());

							row3HashKey.hashCodeDirty = true;

							tHash_Lookup_row3.lookup(row3HashKey);

							if (!tHash_Lookup_row3.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_1 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row3 != null && tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3'
							// and it contains more one result from keys : row3.Date = '" + row3HashKey.Date
							// + "'");
						} // G 071

						row3Struct row3 = null;

						row3Struct fromLookup_row3 = null;
						row3 = row3Default;

						if (tHash_Lookup_row3 != null && tHash_Lookup_row3.hasNext()) { // G 099

							fromLookup_row3 = tHash_Lookup_row3.next();

						} // G 099

						if (fromLookup_row3 != null) {
							row3 = fromLookup_row3;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							obtenerJoins = null;

							if (!rejectedInnerJoin_tMap_1) {

// # Output table : 'obtenerJoins'
								obtenerJoins_tmp.aerolineakey = row2.id;
								obtenerJoins_tmp.fechakey = row3.Id;
								obtenerJoins_tmp.flight = row1.Flights;
								obtenerJoins_tmp.cancelledflight = row1.Cancelled;
								obtenerJoins_tmp.cancellationcode = row1.CancellationCode;
								obtenerJoins_tmp.divertedflight = row1.Diverted;
								obtenerJoins_tmp.depdel15 = row1.DepDel15;
								obtenerJoins_tmp.arrdel15 = row1.ArrDel15;
								obtenerJoins_tmp.depdelayminutes = row1.DepDelayMinutes;
								obtenerJoins_tmp.arrdelayminutes = row1.ArrDelayMinutes;
								obtenerJoins_tmp.carrierdelay = row1.CarrierDelay;
								obtenerJoins_tmp.weatherdelay = row1.WeatherDelay;
								obtenerJoins_tmp.nasdelay = row1.NASDelay;
								obtenerJoins_tmp.securitydelay = row1.SecurityDelay;
								obtenerJoins_tmp.lateaircraftdelay = row1.LateAircraftDelay;
								obtenerJoins = obtenerJoins_tmp;
							} // closing inner join bracket (2)
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "obtenerJoins"
						if (obtenerJoins != null) {

							/**
							 * [tDBOutput_1 main ] start
							 */

							currentComponent = "tDBOutput_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "obtenerJoins"

								);
							}

							whetherReject_tDBOutput_1 = false;
							int countertDBOutput_1 = rowCounttDBOutput_1 * (15) + 1;

							if (obtenerJoins.aerolineakey == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1, java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_1.setInt(countertDBOutput_1, obtenerJoins.aerolineakey);

							}

							countertDBOutput_1++;

							if (obtenerJoins.fechakey == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1, java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_1.setInt(countertDBOutput_1, obtenerJoins.fechakey);

							}

							countertDBOutput_1++;

							if (obtenerJoins.flight == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1, java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_1.setInt(countertDBOutput_1, obtenerJoins.flight);

							}

							countertDBOutput_1++;

							if (obtenerJoins.cancelledflight == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1, java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_1.setInt(countertDBOutput_1, obtenerJoins.cancelledflight);

							}

							countertDBOutput_1++;

							if (obtenerJoins.cancellationcode == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1, java.sql.Types.VARCHAR);

							} else {

								pstmt_tDBOutput_1.setString(countertDBOutput_1, obtenerJoins.cancellationcode);

							}

							countertDBOutput_1++;

							if (obtenerJoins.divertedflight == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1, java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_1.setInt(countertDBOutput_1, obtenerJoins.divertedflight);

							}

							countertDBOutput_1++;

							if (obtenerJoins.depdel15 == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1, java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_1.setInt(countertDBOutput_1, obtenerJoins.depdel15);

							}

							countertDBOutput_1++;

							if (obtenerJoins.arrdel15 == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1, java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_1.setInt(countertDBOutput_1, obtenerJoins.arrdel15);

							}

							countertDBOutput_1++;

							if (obtenerJoins.depdelayminutes == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1, java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_1.setInt(countertDBOutput_1, obtenerJoins.depdelayminutes);

							}

							countertDBOutput_1++;

							if (obtenerJoins.arrdelayminutes == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1, java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_1.setInt(countertDBOutput_1, obtenerJoins.arrdelayminutes);

							}

							countertDBOutput_1++;

							if (obtenerJoins.carrierdelay == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1, java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_1.setInt(countertDBOutput_1, obtenerJoins.carrierdelay);

							}

							countertDBOutput_1++;

							if (obtenerJoins.weatherdelay == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1, java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_1.setInt(countertDBOutput_1, obtenerJoins.weatherdelay);

							}

							countertDBOutput_1++;

							if (obtenerJoins.nasdelay == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1, java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_1.setInt(countertDBOutput_1, obtenerJoins.nasdelay);

							}

							countertDBOutput_1++;

							if (obtenerJoins.securitydelay == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1, java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_1.setInt(countertDBOutput_1, obtenerJoins.securitydelay);

							}

							countertDBOutput_1++;

							if (obtenerJoins.lateaircraftdelay == null) {
								pstmt_tDBOutput_1.setNull(countertDBOutput_1, java.sql.Types.INTEGER);

							} else {

								pstmt_tDBOutput_1.setInt(countertDBOutput_1, obtenerJoins.lateaircraftdelay);

							}

							countertDBOutput_1++;

							exInsertColValuetDBOutput_1 = new BufferLine_tDBOutput_1();
							exInsertColValuetDBOutput_1

									.c0(obtenerJoins.aerolineakey).c1(obtenerJoins.fechakey).c2(obtenerJoins.flight)
									.c3(obtenerJoins.cancelledflight).c4(obtenerJoins.cancellationcode)
									.c5(obtenerJoins.divertedflight).c6(obtenerJoins.depdel15).c7(obtenerJoins.arrdel15)
									.c8(obtenerJoins.depdelayminutes).c9(obtenerJoins.arrdelayminutes)
									.c10(obtenerJoins.carrierdelay).c11(obtenerJoins.weatherdelay)
									.c12(obtenerJoins.nasdelay).c13(obtenerJoins.securitydelay)
									.c14(obtenerJoins.lateaircraftdelay);

							exInsertColValueListtDBOutput_1.add(exInsertColValuetDBOutput_1);
							rowCounttDBOutput_1++;

							nb_line_tDBOutput_1++;

							if (rowCounttDBOutput_1 == numPerInsert_tDBOutput_1) {
								int processedCount_tDBOutput_1 = pstmt_tDBOutput_1.executeUpdate();
								insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
								rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
								exInsertColValueListtDBOutput_1.clear();
								rowCounttDBOutput_1 = 0;
								countertDBOutput_1 = 1;
							}

							tos_count_tDBOutput_1++;

							/**
							 * [tDBOutput_1 main ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_end ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_end ] stop
							 */

						} // End of branch "obtenerJoins"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
				}

				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				if (tHash_Lookup_row3 != null) {
					tHash_Lookup_row3.endGet();
				}
				globalMap.remove("tHash_Lookup_row3");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (rowCounttDBOutput_1 != 0) {

					StringBuilder extendInsertValue_tDBOutput_1 = new StringBuilder();
					for (int i_tDBOutput_1 = 0; i_tDBOutput_1 < rowCounttDBOutput_1; i_tDBOutput_1++) {
						extendInsertValue_tDBOutput_1.append("(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
						if (i_tDBOutput_1 != rowCounttDBOutput_1 - 1)
							extendInsertValue_tDBOutput_1.append(",");
					}

					insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1
							+ "\" (\"aerolineakey\",\"fechakey\",\"flight\",\"cancelledflight\",\"cancellationcode\",\"divertedflight\",\"depdel15\",\"arrdel15\",\"depdelayminutes\",\"arrdelayminutes\",\"carrierdelay\",\"weatherdelay\",\"nasdelay\",\"securitydelay\",\"lateaircraftdelay\") VALUES "
							+ extendInsertValue_tDBOutput_1.toString();
					pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement("--Talend -v 8.0 \n " + insert_tDBOutput_1);
					rowCounttDBOutput_1 = 0;
					for (BufferLine_tDBOutput_1 bufferLtDBOutput_1 : exInsertColValueListtDBOutput_1) {
						int counttDBOutput_1 = rowCounttDBOutput_1 * (15) + 1;
						if (bufferLtDBOutput_1.aerolineakey == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1, java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_1.setInt(counttDBOutput_1, bufferLtDBOutput_1.aerolineakey);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.fechakey == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1, java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_1.setInt(counttDBOutput_1, bufferLtDBOutput_1.fechakey);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.flight == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1, java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_1.setInt(counttDBOutput_1, bufferLtDBOutput_1.flight);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.cancelledflight == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1, java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_1.setInt(counttDBOutput_1, bufferLtDBOutput_1.cancelledflight);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.cancellationcode == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1, java.sql.Types.VARCHAR);

						} else {

							pstmt_tDBOutput_1.setString(counttDBOutput_1, bufferLtDBOutput_1.cancellationcode);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.divertedflight == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1, java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_1.setInt(counttDBOutput_1, bufferLtDBOutput_1.divertedflight);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.depdel15 == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1, java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_1.setInt(counttDBOutput_1, bufferLtDBOutput_1.depdel15);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.arrdel15 == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1, java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_1.setInt(counttDBOutput_1, bufferLtDBOutput_1.arrdel15);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.depdelayminutes == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1, java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_1.setInt(counttDBOutput_1, bufferLtDBOutput_1.depdelayminutes);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.arrdelayminutes == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1, java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_1.setInt(counttDBOutput_1, bufferLtDBOutput_1.arrdelayminutes);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.carrierdelay == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1, java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_1.setInt(counttDBOutput_1, bufferLtDBOutput_1.carrierdelay);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.weatherdelay == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1, java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_1.setInt(counttDBOutput_1, bufferLtDBOutput_1.weatherdelay);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.nasdelay == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1, java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_1.setInt(counttDBOutput_1, bufferLtDBOutput_1.nasdelay);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.securitydelay == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1, java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_1.setInt(counttDBOutput_1, bufferLtDBOutput_1.securitydelay);

						}

						counttDBOutput_1++;

						if (bufferLtDBOutput_1.lateaircraftdelay == null) {
							pstmt_tDBOutput_1.setNull(counttDBOutput_1, java.sql.Types.INTEGER);

						} else {

							pstmt_tDBOutput_1.setInt(counttDBOutput_1, bufferLtDBOutput_1.lateaircraftdelay);

						}

						counttDBOutput_1++;

						rowCounttDBOutput_1++;
					}
					int processedCount_tDBOutput_1 = pstmt_tDBOutput_1.executeUpdate();
					insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
					rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
				}

				if (pstmt_tDBOutput_1 != null) {
					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "obtenerJoins");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row3");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
					if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_1")) != null) {
						pstmtToClose_tDBOutput_1.close();
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift = new byte[0];
		static byte[] commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Id;

		public Integer getId() {
			return this.Id;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public Integer YearMonthNum;

		public Integer getYearMonthNum() {
			return this.YearMonthNum;
		}

		public String Month;

		public String getMonth() {
			return this.Month;
		}

		public Integer Year;

		public Integer getYear() {
			return this.Year;
		}

		public Integer MonthNum;

		public Integer getMonthNum() {
			return this.MonthNum;
		}

		public String MonthName;

		public String getMonthName() {
			return this.MonthName;
		}

		public Integer WeekNum;

		public Integer getWeekNum() {
			return this.WeekNum;
		}

		public Integer DayNumOfYear;

		public Integer getDayNumOfYear() {
			return this.DayNumOfYear;
		}

		public Integer DayNumOfMonth;

		public Integer getDayNumOfMonth() {
			return this.DayNumOfMonth;
		}

		public Integer DayNumOfWeek;

		public Integer getDayNumOfWeek() {
			return this.DayNumOfWeek;
		}

		public String DayName;

		public String getDayName() {
			return this.DayName;
		}

		public Integer Quarter;

		public Integer getQuarter() {
			return this.Quarter;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.Id = this.Id;
			other.Date = this.Date;
			other.YearMonthNum = this.YearMonthNum;
			other.Month = this.Month;
			other.Year = this.Year;
			other.MonthNum = this.MonthNum;
			other.MonthName = this.MonthName;
			other.WeekNum = this.WeekNum;
			other.DayNumOfYear = this.DayNumOfYear;
			other.DayNumOfMonth = this.DayNumOfMonth;
			other.DayNumOfWeek = this.DayNumOfWeek;
			other.DayName = this.DayName;
			other.Quarter = this.Quarter;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.Date = this.Date;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = unmarshaller.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift) {

				try {

					int length = 0;

					this.Date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift) {

				try {

					int length = 0;

					this.Date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.Date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// java.util.Date

				writeDate(this.Date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Id = readInteger(dis, ois);

				this.YearMonthNum = readInteger(dis, ois);

				this.Month = readString(dis, ois);

				this.Year = readInteger(dis, ois);

				this.MonthNum = readInteger(dis, ois);

				this.MonthName = readString(dis, ois);

				this.WeekNum = readInteger(dis, ois);

				this.DayNumOfYear = readInteger(dis, ois);

				this.DayNumOfMonth = readInteger(dis, ois);

				this.DayNumOfWeek = readInteger(dis, ois);

				this.DayName = readString(dis, ois);

				this.Quarter = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.Id = readInteger(dis, objectIn);

				this.YearMonthNum = readInteger(dis, objectIn);

				this.Month = readString(dis, objectIn);

				this.Year = readInteger(dis, objectIn);

				this.MonthNum = readInteger(dis, objectIn);

				this.MonthName = readString(dis, objectIn);

				this.WeekNum = readInteger(dis, objectIn);

				this.DayNumOfYear = readInteger(dis, objectIn);

				this.DayNumOfMonth = readInteger(dis, objectIn);

				this.DayNumOfWeek = readInteger(dis, objectIn);

				this.DayName = readString(dis, objectIn);

				this.Quarter = readInteger(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.Id, dos, oos);

				writeInteger(this.YearMonthNum, dos, oos);

				writeString(this.Month, dos, oos);

				writeInteger(this.Year, dos, oos);

				writeInteger(this.MonthNum, dos, oos);

				writeString(this.MonthName, dos, oos);

				writeInteger(this.WeekNum, dos, oos);

				writeInteger(this.DayNumOfYear, dos, oos);

				writeInteger(this.DayNumOfMonth, dos, oos);

				writeInteger(this.DayNumOfWeek, dos, oos);

				writeString(this.DayName, dos, oos);

				writeInteger(this.Quarter, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeInteger(this.Id, dos, objectOut);

				writeInteger(this.YearMonthNum, dos, objectOut);

				writeString(this.Month, dos, objectOut);

				writeInteger(this.Year, dos, objectOut);

				writeInteger(this.MonthNum, dos, objectOut);

				writeString(this.MonthName, dos, objectOut);

				writeInteger(this.WeekNum, dos, objectOut);

				writeInteger(this.DayNumOfYear, dos, objectOut);

				writeInteger(this.DayNumOfMonth, dos, objectOut);

				writeInteger(this.DayNumOfWeek, dos, objectOut);

				writeString(this.DayName, dos, objectOut);

				writeInteger(this.Quarter, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + String.valueOf(Id));
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",YearMonthNum=" + String.valueOf(YearMonthNum));
			sb.append(",Month=" + Month);
			sb.append(",Year=" + String.valueOf(Year));
			sb.append(",MonthNum=" + String.valueOf(MonthNum));
			sb.append(",MonthName=" + MonthName);
			sb.append(",WeekNum=" + String.valueOf(WeekNum));
			sb.append(",DayNumOfYear=" + String.valueOf(DayNumOfYear));
			sb.append(",DayNumOfMonth=" + String.valueOf(DayNumOfMonth));
			sb.append(",DayNumOfWeek=" + String.valueOf(DayNumOfWeek));
			sb.append(",DayName=" + DayName);
			sb.append(",Quarter=" + String.valueOf(Quarter));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tAdvancedHash_row3 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row3", false);
				start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tAdvancedHash_row3 = 0;

				// connection name:row3
				// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(row3,row3) |
				// target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
				// linked node: tMap_1 - inputs:(row1,row3,row2) outputs:(obtenerJoins)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row3Struct>getLookup(matchingModeEnum_row3);

				globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);

				/**
				 * [tAdvancedHash_row3 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
				calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "select * from fecha";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row3.Id = null;
						} else {

							row3.Id = rs_tDBInput_2.getInt(1);
							if (rs_tDBInput_2.wasNull()) {
								row3.Id = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row3.Date = null;
						} else {

							if (rs_tDBInput_2.getString(2) != null) {
								String dateString_tDBInput_2 = rs_tDBInput_2.getString(2);
								if (!("0000-00-00").equals(dateString_tDBInput_2)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
									row3.Date = rs_tDBInput_2.getTimestamp(2);
								} else {
									row3.Date = (java.util.Date) year0_tDBInput_2.clone();
								}
							} else {
								row3.Date = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row3.YearMonthNum = null;
						} else {

							row3.YearMonthNum = rs_tDBInput_2.getInt(3);
							if (rs_tDBInput_2.wasNull()) {
								row3.YearMonthNum = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row3.Month = null;
						} else {

							row3.Month = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row3.Year = null;
						} else {

							row3.Year = rs_tDBInput_2.getInt(5);
							if (rs_tDBInput_2.wasNull()) {
								row3.Year = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row3.MonthNum = null;
						} else {

							row3.MonthNum = rs_tDBInput_2.getInt(6);
							if (rs_tDBInput_2.wasNull()) {
								row3.MonthNum = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row3.MonthName = null;
						} else {

							row3.MonthName = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row3.WeekNum = null;
						} else {

							row3.WeekNum = rs_tDBInput_2.getInt(8);
							if (rs_tDBInput_2.wasNull()) {
								row3.WeekNum = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row3.DayNumOfYear = null;
						} else {

							row3.DayNumOfYear = rs_tDBInput_2.getInt(9);
							if (rs_tDBInput_2.wasNull()) {
								row3.DayNumOfYear = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 10) {
							row3.DayNumOfMonth = null;
						} else {

							row3.DayNumOfMonth = rs_tDBInput_2.getInt(10);
							if (rs_tDBInput_2.wasNull()) {
								row3.DayNumOfMonth = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 11) {
							row3.DayNumOfWeek = null;
						} else {

							row3.DayNumOfWeek = rs_tDBInput_2.getInt(11);
							if (rs_tDBInput_2.wasNull()) {
								row3.DayNumOfWeek = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 12) {
							row3.DayName = null;
						} else {

							row3.DayName = routines.system.JDBCUtil.getString(rs_tDBInput_2, 12, false);
						}
						if (colQtyInRs_tDBInput_2 < 13) {
							row3.Quarter = null;
						} else {

							row3.Quarter = rs_tDBInput_2.getInt(13);
							if (rs_tDBInput_2.wasNull()) {
								row3.Quarter = null;
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row3 main ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row3"

							);
						}

						row3Struct row3_HashRow = new row3Struct();

						row3_HashRow.Id = row3.Id;

						row3_HashRow.Date = row3.Date;

						row3_HashRow.YearMonthNum = row3.YearMonthNum;

						row3_HashRow.Month = row3.Month;

						row3_HashRow.Year = row3.Year;

						row3_HashRow.MonthNum = row3.MonthNum;

						row3_HashRow.MonthName = row3.MonthName;

						row3_HashRow.WeekNum = row3.WeekNum;

						row3_HashRow.DayNumOfYear = row3.DayNumOfYear;

						row3_HashRow.DayNumOfMonth = row3.DayNumOfMonth;

						row3_HashRow.DayNumOfWeek = row3.DayNumOfWeek;

						row3_HashRow.DayName = row3.DayName;

						row3_HashRow.Quarter = row3.Quarter;

						tHash_Lookup_row3.put(row3_HashRow);

						tos_count_tAdvancedHash_row3++;

						/**
						 * [tAdvancedHash_row3 main ] stop
						 */

						/**
						 * [tAdvancedHash_row3 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						/**
						 * [tAdvancedHash_row3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row3 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						/**
						 * [tAdvancedHash_row3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
				}

				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row3 end ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				tHash_Lookup_row3.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tAdvancedHash_row3", true);
				end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row3 finally ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				/**
				 * [tAdvancedHash_row3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift = new byte[0];
		static byte[] commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public String codigo;

		public String getCodigo() {
			return this.codigo;
		}

		public String aerolinea;

		public String getAerolinea() {
			return this.aerolinea;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.codigo == null) ? 0 : this.codigo.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.codigo == null) {
				if (other.codigo != null)
					return false;

			} else if (!this.codigo.equals(other.codigo))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.id = this.id;
			other.codigo = this.codigo;
			other.aerolinea = this.aerolinea;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.codigo = this.codigo;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = unmarshaller.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift.length) {
					if (length < 1024 && commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift.length == 0) {
						commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift = new byte[1024];
					} else {
						commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift, 0, length);
				strReturn = new String(commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift.length) {
					if (length < 1024 && commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift.length == 0) {
						commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift = new byte[1024];
					} else {
						commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift, 0, length);
				strReturn = new String(commonByteArray_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift) {

				try {

					int length = 0;

					this.codigo = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PARCIAL_vuelos_tabla_to_fact_vuelos_redshift) {

				try {

					int length = 0;

					this.codigo = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.codigo, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.codigo, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = readInteger(dis, ois);

				this.aerolinea = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.id = readInteger(dis, objectIn);

				this.aerolinea = readString(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.id, dos, oos);

				writeString(this.aerolinea, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeInteger(this.id, dos, objectOut);

				writeString(this.aerolinea, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",codigo=" + codigo);
			sb.append(",aerolinea=" + aerolinea);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.codigo, other.codigo);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tDBInput_3 - inputs:(after_tDBInput_1) outputs:(row2,row2) |
				// target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
				// linked node: tMap_1 - inputs:(row1,row3,row2) outputs:(obtenerJoins)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct>getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				java.util.Calendar calendar_tDBInput_3 = java.util.Calendar.getInstance();
				calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "select * from aerolinea;\n";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row2.id = null;
						} else {

							row2.id = rs_tDBInput_3.getInt(1);
							if (rs_tDBInput_3.wasNull()) {
								row2.id = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row2.codigo = null;
						} else {

							row2.codigo = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row2.aerolinea = null;
						} else {

							row2.aerolinea = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row2"

							);
						}

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.id = row2.id;

						row2_HashRow.codigo = row2.codigo;

						row2_HashRow.aerolinea = row2.aerolinea;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
				}

				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final vuelos_tabla_to_fact_vuelos_redshift vuelos_tabla_to_fact_vuelos_redshiftClass = new vuelos_tabla_to_fact_vuelos_redshift();

		int exitCode = vuelos_tabla_to_fact_vuelos_redshiftClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = vuelos_tabla_to_fact_vuelos_redshift.class.getClassLoader()
					.getResourceAsStream(
							"parcial/vuelos_tabla_to_fact_vuelos_redshift_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = vuelos_tabla_to_fact_vuelos_redshift.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBConnection_1) {
			globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);

			e_tDBConnection_1.printStackTrace();

		}
		try {
			errorCode = null;
			tDBConnection_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBConnection_2) {
			globalMap.put("tDBConnection_2_SUBPROCESS_STATE", -1);

			e_tDBConnection_2.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : vuelos_tabla_to_fact_vuelos_redshift");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_2");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 283811 characters generated by Talend Open Studio for Data Integration on the
 * 29 October 2023 at 18:18:05 GMT-06:00
 ************************************************************************************************/